[{"/Users/jbogle/Code/cardinal-token-manager-ui/api/api.ts":"1","/Users/jbogle/Code/cardinal-token-manager-ui/api/editions.ts":"2","/Users/jbogle/Code/cardinal-token-manager-ui/api/utils.ts":"3","/Users/jbogle/Code/cardinal-token-manager-ui/api/wrappedSol.ts":"4","/Users/jbogle/Code/cardinal-token-manager-ui/common/Airdrop.tsx":"5","/Users/jbogle/Code/cardinal-token-manager-ui/common/Header.tsx":"6","/Users/jbogle/Code/cardinal-token-manager-ui/common/LoadingPulse.tsx":"7","/Users/jbogle/Code/cardinal-token-manager-ui/common/NFT.tsx":"8","/Users/jbogle/Code/cardinal-token-manager-ui/common/NFTOverlay.tsx":"9","/Users/jbogle/Code/cardinal-token-manager-ui/common/NFTPlaceholder.tsx":"10","/Users/jbogle/Code/cardinal-token-manager-ui/common/Notification.tsx":"11","/Users/jbogle/Code/cardinal-token-manager-ui/common/StyledBackground.tsx":"12","/Users/jbogle/Code/cardinal-token-manager-ui/common/StyledContainer.tsx":"13","/Users/jbogle/Code/cardinal-token-manager-ui/common/Tags.tsx":"14","/Users/jbogle/Code/cardinal-token-manager-ui/common/Transactions.ts":"15","/Users/jbogle/Code/cardinal-token-manager-ui/common/Wallets.tsx":"16","/Users/jbogle/Code/cardinal-token-manager-ui/common/colors.ts":"17","/Users/jbogle/Code/cardinal-token-manager-ui/common/icons.tsx":"18","/Users/jbogle/Code/cardinal-token-manager-ui/common/units.ts":"19","/Users/jbogle/Code/cardinal-token-manager-ui/common/utils.ts":"20","/Users/jbogle/Code/cardinal-token-manager-ui/components/Browse.tsx":"21","/Users/jbogle/Code/cardinal-token-manager-ui/components/Manage.tsx":"22","/Users/jbogle/Code/cardinal-token-manager-ui/components/Wallet.tsx":"23","/Users/jbogle/Code/cardinal-token-manager-ui/config/config.ts":"24","/Users/jbogle/Code/cardinal-token-manager-ui/next-env.d.ts":"25","/Users/jbogle/Code/cardinal-token-manager-ui/pages/[host]/[addressId].tsx":"26","/Users/jbogle/Code/cardinal-token-manager-ui/pages/[host]/claim/[tokenManagerString].tsx":"27","/Users/jbogle/Code/cardinal-token-manager-ui/pages/[host]/index.tsx":"28","/Users/jbogle/Code/cardinal-token-manager-ui/pages/[host]/scan.tsx":"29","/Users/jbogle/Code/cardinal-token-manager-ui/pages/_app.tsx":"30","/Users/jbogle/Code/cardinal-token-manager-ui/pages/_document.tsx":"31","/Users/jbogle/Code/cardinal-token-manager-ui/providers/EnvironmentProvider.tsx":"32","/Users/jbogle/Code/cardinal-token-manager-ui/providers/ErrorProvider.tsx":"33","/Users/jbogle/Code/cardinal-token-manager-ui/providers/IssuedTokensProvider.tsx":"34","/Users/jbogle/Code/cardinal-token-manager-ui/providers/ManagedTokensProvider.tsx":"35","/Users/jbogle/Code/cardinal-token-manager-ui/providers/PaymentMintsProvider.tsx":"36","/Users/jbogle/Code/cardinal-token-manager-ui/providers/ProjectConfigProvider.tsx":"37","/Users/jbogle/Code/cardinal-token-manager-ui/providers/TokenDataProvider.tsx":"38","/Users/jbogle/Code/cardinal-token-manager-ui/providers/UTCNowProvider.tsx":"39","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/QRCodeProvider.tsx":"40","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/RentalExtensionModalProvider.tsx":"41","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/RentalModalProvider.tsx":"42","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/Alert.tsx":"43","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/Button.tsx":"44","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/ButtonWithFooter.tsx":"45","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/Constants.ts":"46","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/LabeledInput.tsx":"47","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/LoadingSpinner.tsx":"48","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/Logo.tsx":"49","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/LogoTitled.tsx":"50","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/MintPriceSelector.tsx":"51","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/PoweredByFooter.tsx":"52","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/QRCode.tsx":"53","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/StepDetail.tsx":"54","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/TwitterIcon.tsx":"55","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/icons.tsx":"56","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/components/RentalCard.tsx":"57","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/components/RentalExtensionCard.tsx":"58","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/modal/index.tsx":"59","/Users/jbogle/Code/cardinal-token-manager-ui/stories/RentalCard.stories.tsx":"60"},{"size":15538,"mtime":1647559036897,"results":"61","hashOfConfig":"62"},{"size":1498,"mtime":1647559036897,"results":"63","hashOfConfig":"62"},{"size":4713,"mtime":1647559036897,"results":"64","hashOfConfig":"62"},{"size":1494,"mtime":1647559036897,"results":"65","hashOfConfig":"62"},{"size":1189,"mtime":1647559899998,"results":"66","hashOfConfig":"62"},{"size":9408,"mtime":1647559922097,"results":"67","hashOfConfig":"62"},{"size":1866,"mtime":1647559036897,"results":"68","hashOfConfig":"62"},{"size":8403,"mtime":1647559215874,"results":"69","hashOfConfig":"62"},{"size":7268,"mtime":1647559145965,"results":"70","hashOfConfig":"62"},{"size":608,"mtime":1647559225131,"results":"71","hashOfConfig":"62"},{"size":832,"mtime":1647559036897,"results":"72","hashOfConfig":"62"},{"size":1296,"mtime":1647483779272,"results":"73","hashOfConfig":"62"},{"size":222,"mtime":1643939817990,"results":"74","hashOfConfig":"62"},{"size":648,"mtime":1647559036897,"results":"75","hashOfConfig":"62"},{"size":1611,"mtime":1647559531079,"results":"76","hashOfConfig":"62"},{"size":343,"mtime":1647559036897,"results":"77","hashOfConfig":"62"},{"size":313,"mtime":1647496009966,"results":"78","hashOfConfig":"62"},{"size":2974,"mtime":1643965288905,"results":"79","hashOfConfig":"62"},{"size":2121,"mtime":1647559036897,"results":"80","hashOfConfig":"62"},{"size":3336,"mtime":1647559504483,"results":"81","hashOfConfig":"62"},{"size":18479,"mtime":1647559339767,"results":"82","hashOfConfig":"62"},{"size":8037,"mtime":1647559958576,"results":"83","hashOfConfig":"62"},{"size":4547,"mtime":1647560053043,"results":"84","hashOfConfig":"62"},{"size":2903,"mtime":1647559036897,"results":"85","hashOfConfig":"62"},{"size":201,"mtime":1643831836000,"results":"86","hashOfConfig":"62"},{"size":2293,"mtime":1647560026411,"results":"87","hashOfConfig":"62"},{"size":18057,"mtime":1647560118208,"results":"88","hashOfConfig":"62"},{"size":2971,"mtime":1647559998246,"results":"89","hashOfConfig":"62"},{"size":6888,"mtime":1647559146106,"results":"90","hashOfConfig":"62"},{"size":2405,"mtime":1647559036897,"results":"91","hashOfConfig":"62"},{"size":1209,"mtime":1647559036897,"results":"92","hashOfConfig":"62"},{"size":2120,"mtime":1647559036897,"results":"93","hashOfConfig":"62"},{"size":947,"mtime":1647559036897,"results":"94","hashOfConfig":"62"},{"size":2427,"mtime":1647559490454,"results":"95","hashOfConfig":"62"},{"size":2526,"mtime":1647559536160,"results":"96","hashOfConfig":"62"},{"size":2505,"mtime":1647559542485,"results":"97","hashOfConfig":"62"},{"size":2164,"mtime":1647559146106,"results":"98","hashOfConfig":"62"},{"size":2835,"mtime":1647559550265,"results":"99","hashOfConfig":"62"},{"size":958,"mtime":1647559036897,"results":"100","hashOfConfig":"62"},{"size":2212,"mtime":1647559871419,"results":"101","hashOfConfig":"62"},{"size":2604,"mtime":1647559036897,"results":"102","hashOfConfig":"62"},{"size":2937,"mtime":1647559036897,"results":"103","hashOfConfig":"62"},{"size":2137,"mtime":1647559036897,"results":"104","hashOfConfig":"62"},{"size":2950,"mtime":1647559794474,"results":"105","hashOfConfig":"62"},{"size":1821,"mtime":1647559036897,"results":"106","hashOfConfig":"62"},{"size":290,"mtime":1643963181178,"results":"107","hashOfConfig":"62"},{"size":1506,"mtime":1644049955918,"results":"108","hashOfConfig":"62"},{"size":1370,"mtime":1646727461087,"results":"109","hashOfConfig":"62"},{"size":596876,"mtime":1643959858196,"results":"110","hashOfConfig":"62"},{"size":5100,"mtime":1643959858197,"results":"111","hashOfConfig":"62"},{"size":1766,"mtime":1647559036897,"results":"112","hashOfConfig":"62"},{"size":590,"mtime":1647559036897,"results":"113","hashOfConfig":"62"},{"size":2842,"mtime":1647559841522,"results":"114","hashOfConfig":"62"},{"size":1136,"mtime":1644537293110,"results":"115","hashOfConfig":"62"},{"size":869,"mtime":1643959858197,"results":"116","hashOfConfig":"62"},{"size":14659,"mtime":1646727461087,"results":"117","hashOfConfig":"62"},{"size":36894,"mtime":1647559781264,"results":"118","hashOfConfig":"62"},{"size":14299,"mtime":1647559588176,"results":"119","hashOfConfig":"62"},{"size":6042,"mtime":1647559762573,"results":"120","hashOfConfig":"62"},{"size":5083,"mtime":1647559036897,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},"t1ap4c",{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308"},{"filePath":"309","messages":"310","suppressedMessages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312"},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319"},"/Users/jbogle/Code/cardinal-token-manager-ui/api/api.ts",["320","321","322","323","324"],[],"import { getBatchedMultiplAccounts as getBatchedMultipleAccounts } from '@cardinal/common'\nimport type { AccountData } from '@cardinal/token-manager'\nimport {\n  claimApprover,\n  timeInvalidator,\n  tokenManager,\n  useInvalidator,\n} from '@cardinal/token-manager/dist/cjs/programs'\nimport type { PaidClaimApproverData } from '@cardinal/token-manager/dist/cjs/programs/claimApprover'\nimport type { TimeInvalidatorData } from '@cardinal/token-manager/dist/cjs/programs/timeInvalidator'\nimport type { TokenManagerData } from '@cardinal/token-manager/dist/cjs/programs/tokenManager'\nimport { tryTokenManagerAddressFromMint } from '@cardinal/token-manager/dist/cjs/programs/tokenManager/pda'\nimport type { UseInvalidatorData } from '@cardinal/token-manager/dist/cjs/programs/useInvalidator'\nimport * as metaplex from '@metaplex-foundation/mpl-token-metadata'\nimport {\n  Edition,\n  EditionData,\n  MasterEditionV2Data,\n  MetadataKey,\n} from '@metaplex-foundation/mpl-token-metadata'\nimport * as anchor from '@project-serum/anchor'\nimport * as spl from '@solana/spl-token'\nimport type {\n  AccountInfo,\n  Connection,\n  ParsedAccountData} from '@solana/web3.js';\nimport {\n  PublicKey,\n  SystemProgram,\n} from '@solana/web3.js'\n\nexport async function findAssociatedTokenAddress(\n  walletAddress: PublicKey,\n  mintAddress: PublicKey\n): Promise<PublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        spl.TOKEN_PROGRAM_ID.toBuffer(),\n        mintAddress.toBuffer(),\n      ],\n      spl.ASSOCIATED_TOKEN_PROGRAM_ID\n    )\n  )[0]\n}\n\nexport type TokenData = {\n  tokenAccount?: {\n    pubkey: PublicKey\n    account: AccountInfo<ParsedAccountData>\n  }\n  tokenManager?: AccountData<TokenManagerData>\n  metaplexData?: { pubkey: PublicKey; data: metaplex.MetadataData } | null\n  editionData?: {\n    pubkey: PublicKey\n    data: metaplex.EditionData | metaplex.MasterEditionData\n  } | null\n  metadata?: any\n  claimApprover?: AccountData<PaidClaimApproverData> | null\n  useInvalidator?: AccountData<UseInvalidatorData> | null\n  timeInvalidator?: AccountData<TimeInvalidatorData> | null\n  recipientTokenAccount?: spl.AccountInfo | null\n}\n\nexport async function getTokenAccountsWithData(\n  connection: Connection,\n  addressId: string\n): Promise<TokenData[]> {\n  const allTokenAccounts = await connection.getParsedTokenAccountsByOwner(\n    new PublicKey(addressId),\n    { programId: spl.TOKEN_PROGRAM_ID }\n  )\n  const tokenAccounts = allTokenAccounts.value\n    .filter(\n      (tokenAccount) =>\n        tokenAccount.account.data.parsed.info.tokenAmount.uiAmount > 0\n    )\n    .sort((a, b) => a.pubkey.toBase58().localeCompare(b.pubkey.toBase58()))\n\n  const metadataTuples: [\n    PublicKey,\n    PublicKey,\n    PublicKey | null,\n    PublicKey | null,\n    PublicKey | null,\n    PublicKey\n  ][] = await Promise.all(\n    tokenAccounts.map(async (tokenAccount) => {\n      const [[metadataId], editionId, tokenManagerId] = await Promise.all([\n        PublicKey.findProgramAddress(\n          [\n            anchor.utils.bytes.utf8.encode(metaplex.MetadataProgram.PREFIX),\n            metaplex.MetadataProgram.PUBKEY.toBuffer(),\n            new PublicKey(\n              tokenAccount.account.data.parsed.info.mint\n            ).toBuffer(),\n          ],\n          metaplex.MetadataProgram.PUBKEY\n        ),\n        Edition.getPDA(tokenAccount.account.data.parsed.info.mint),\n        tryTokenManagerAddressFromMint(\n          connection,\n          new PublicKey(tokenAccount.account.data.parsed.info.mint)\n        ),\n      ])\n\n      let timeInvalidatorId = null\n      let useInvalidatorId = null\n      if (tokenManagerId) {\n        [[timeInvalidatorId], [useInvalidatorId]] = await Promise.all([\n          timeInvalidator.pda.findTimeInvalidatorAddress(tokenManagerId),\n          useInvalidator.pda.findUseInvalidatorAddress(tokenManagerId),\n        ])\n      }\n      return [\n        metadataId,\n        editionId,\n        tokenManagerId,\n        timeInvalidatorId,\n        useInvalidatorId,\n        tokenAccount.pubkey,\n      ]\n    })\n  )\n\n  // @ts-ignore\n  const metadataIds: [\n    PublicKey[],\n    PublicKey[],\n    PublicKey[],\n    PublicKey[],\n    PublicKey[]\n  ] =\n    // @ts-ignore\n    metadataTuples.reduce(\n      (\n        acc,\n        [\n          metaplexId,\n          editionId,\n          tokenManagerId,\n          timeInvalidatorId,\n          useInvalidatorId,\n        ]\n      ) => [\n        [...acc[0], metaplexId],\n        [...acc[1], editionId],\n        [...acc[2], tokenManagerId],\n        [...acc[3], timeInvalidatorId],\n        [...acc[4], useInvalidatorId],\n      ],\n      [[], [], [], [], []]\n    )\n\n  const [\n    metaplexAccountInfos,\n    editionInfos,\n    tokenManagers,\n    timeInvalidators,\n    useInvalidators,\n  ] = await Promise.all([\n    getBatchedMultipleAccounts(connection, metadataIds[0]),\n    getBatchedMultipleAccounts(connection, metadataIds[1]),\n    tokenManager.accounts.getTokenManagers(connection, metadataIds[2]),\n    timeInvalidator.accounts.getTimeInvalidators(connection, metadataIds[3]),\n    useInvalidator.accounts.getUseInvalidators(connection, metadataIds[4]),\n  ])\n\n  const metaplexData = metaplexAccountInfos.map((accountInfo, i) => {\n    let md\n    try {\n      md = {\n        pubkey: metadataIds[0][i]!,\n        ...accountInfo,\n        data: metaplex.MetadataData.deserialize(accountInfo?.data as Buffer),\n      }\n    } catch (e) {}\n    return md\n  })\n\n  const editionData = editionInfos.map((accountInfo, i) => {\n    let md\n    try {\n      const key =\n        accountInfo === null || accountInfo === void 0\n          ? void 0\n          : (accountInfo.data as Buffer)[0]\n      let parsed\n      if (key === MetadataKey.EditionV1) {\n        parsed = EditionData.deserialize(accountInfo?.data as Buffer)\n      } else if (\n        key === MetadataKey.MasterEditionV1 ||\n        key === MetadataKey.MasterEditionV2\n      ) {\n        parsed = MasterEditionV2Data.deserialize(accountInfo?.data as Buffer)\n      }\n\n      if (parsed) {\n        md = {\n          pubkey: metadataIds[1][i]!,\n          ...accountInfo,\n          data: parsed,\n        }\n      }\n    } catch (e) {\n      console.log(e)\n    }\n    return md\n  })\n\n  const metadata = await Promise.all(\n    metaplexData.map(async (md) => {\n      try {\n        if (!md?.data.data.uri) return null\n        const json = await fetch(md.data.data.uri).then((r) => r.json())\n        return {\n          pubkey: md.pubkey,\n          data: json,\n        }\n      } catch (e) {\n        // console.log(e)\n        return null\n      }\n    })\n  )\n\n  return metadataTuples.map(\n    ([\n      metaplexId,\n      editionId,\n      tokenManagerId,\n      timeInvalidatorId,\n      useInvalidatorId,\n      tokenAccountId,\n    ]) => ({\n      tokenAccount: tokenAccounts.find((data) =>\n        data ? data.pubkey.toBase58() === tokenAccountId.toBase58() : undefined\n      ),\n      metaplexData: metaplexData.find((data) =>\n        data ? data.pubkey.toBase58() === metaplexId.toBase58() : undefined\n      ),\n      editionData: editionData.find((data) =>\n        data ? data.pubkey.toBase58() === editionId.toBase58() : undefined\n      ),\n      tokenManager: tokenManagers.find((tkm) =>\n        tkm?.parsed\n          ? tkm.pubkey.toBase58() === tokenManagerId?.toBase58()\n          : undefined\n      ),\n      metadata: metadata.find((data) =>\n        data ? data.pubkey.toBase58() === metaplexId.toBase58() : undefined\n      ),\n      useInvalidator: useInvalidators.find((data) =>\n        data?.parsed\n          ? data.pubkey.toBase58() === useInvalidatorId?.toBase58()\n          : undefined\n      ),\n      timeInvalidator: timeInvalidators.find((data) =>\n        data?.parsed\n          ? data.pubkey.toBase58() === timeInvalidatorId?.toBase58()\n          : undefined\n      ),\n    })\n  )\n}\n\nexport async function getTokenDatas(\n  connection: Connection,\n  tokenManagerDatas: AccountData<TokenManagerData>[]\n): Promise<TokenData[]> {\n  const metadataTuples: [\n    PublicKey,\n    PublicKey,\n    PublicKey,\n    PublicKey,\n    PublicKey,\n    PublicKey | null\n  ][] = await Promise.all(\n    tokenManagerDatas.map(async (tokenManagerData) => {\n      const [\n        [metadataId],\n        [claimApproverId],\n        [timeInvalidatorId],\n        [useInvalidatorId],\n      ] = await Promise.all([\n        PublicKey.findProgramAddress(\n          [\n            anchor.utils.bytes.utf8.encode(metaplex.MetadataProgram.PREFIX),\n            metaplex.MetadataProgram.PUBKEY.toBuffer(),\n            tokenManagerData.parsed.mint.toBuffer(),\n          ],\n          metaplex.MetadataProgram.PUBKEY\n        ),\n        claimApprover.pda.findClaimApproverAddress(tokenManagerData.pubkey),\n        timeInvalidator.pda.findTimeInvalidatorAddress(tokenManagerData.pubkey),\n        useInvalidator.pda.findUseInvalidatorAddress(tokenManagerData.pubkey),\n      ])\n\n      const recipientTokenAccountId =\n        tokenManagerData.parsed.recipientTokenAccount?.toString() !==\n        SystemProgram.programId.toString()\n          ? (tokenManagerData.parsed?.recipientTokenAccount as PublicKey)\n          : null\n\n      return [\n        metadataId,\n        tokenManagerData.pubkey,\n        claimApproverId,\n        timeInvalidatorId,\n        useInvalidatorId,\n        recipientTokenAccountId,\n      ]\n    })\n  )\n\n  // @ts-ignore\n  const metadataIds: [\n    PublicKey[],\n    PublicKey[],\n    PublicKey[],\n    PublicKey[],\n    PublicKey[]\n  ] =\n    // @ts-ignore\n    metadataTuples.reduce(\n      (\n        acc,\n        [\n          metaplexId,\n          _tokenManagerId,\n          claimApproverId,\n          timeInvalidatorId,\n          useInvalidatorId,\n          recipientTokenAccountId,\n        ]\n      ) => [\n        [...acc[0], metaplexId],\n        [...acc[1], claimApproverId],\n        [...acc[2], timeInvalidatorId],\n        [...acc[3], useInvalidatorId],\n        [...acc[4], recipientTokenAccountId],\n      ],\n      [[], [], [], [], []]\n    )\n\n  const [\n    tokenAccounts,\n    metaplexAccountInfos,\n    claimApprovers,\n    timeInvalidators,\n    useInvalidators,\n  ] = await Promise.all([\n    getBatchedMultipleAccounts(\n      connection,\n      metadataIds[4].filter((pk) => pk),\n      {\n        encoding: 'jsonParsed',\n      }\n    )\n      .then((tokenAccounts) =>\n        tokenAccounts.map(\n          (acc) => (acc?.data as ParsedAccountData).parsed?.info\n        )\n      )\n      .catch((e) => {\n        console.log('Failed ot get token accounts', e)\n        return []\n      }) as Promise<(spl.AccountInfo | null)[]>,\n    getBatchedMultipleAccounts(connection, metadataIds[0]),\n    claimApprover.accounts.getClaimApprovers(connection, metadataIds[1]),\n    timeInvalidator.accounts.getTimeInvalidators(connection, metadataIds[2]),\n    useInvalidator.accounts.getUseInvalidators(connection, metadataIds[3]),\n  ])\n\n  const metaplexData = metaplexAccountInfos.map((accountInfo, i) => {\n    let md\n    try {\n      md = {\n        pubkey: metadataIds[0][i]!,\n        ...accountInfo,\n        data: metaplex.MetadataData.deserialize(accountInfo?.data as Buffer),\n      }\n    } catch (e) {}\n    return md\n  })\n\n  const metadata = await Promise.all(\n    metaplexData.map(async (md) => {\n      try {\n        if (!md?.data.data.uri) return null\n        const json = await fetch(md.data.data.uri).then((r) => r.json())\n        return {\n          pubkey: md.pubkey,\n          data: json,\n        }\n      } catch (e) {\n        // console.log(e)\n        return null\n      }\n    })\n  )\n\n  return metadataTuples.map(\n    ([\n      metaplexId,\n      tokenManagerId,\n      claimApproverId,\n      timeInvalidatorId,\n      useInvalidatorId,\n      _tokenAccountId,\n    ]) => ({\n      recipientTokenAccount: tokenAccounts.find((data) =>\n        data\n          ? data.delegate?.toString() === tokenManagerId?.toString()\n          : undefined\n      ),\n      metaplexData: metaplexData.find((data) =>\n        data ? data.pubkey.toBase58() === metaplexId.toBase58() : undefined\n      ),\n      tokenManager: tokenManagerDatas.find((tkm) =>\n        tkm?.parsed\n          ? tkm.pubkey.toBase58() === tokenManagerId?.toBase58()\n          : undefined\n      ),\n      metadata: metadata.find((data) =>\n        data ? data.pubkey.toBase58() === metaplexId.toBase58() : undefined\n      ),\n      claimApprover: claimApprovers.find((data) =>\n        data?.parsed\n          ? data.pubkey.toBase58() === claimApproverId?.toBase58()\n          : undefined\n      ),\n      useInvalidator: useInvalidators.find((data) =>\n        data?.parsed\n          ? data.pubkey.toBase58() === useInvalidatorId?.toBase58()\n          : undefined\n      ),\n      timeInvalidator: timeInvalidators.find((data) =>\n        data?.parsed\n          ? data.pubkey.toBase58() === timeInvalidatorId?.toBase58()\n          : undefined\n      ),\n    })\n  )\n}\n\nexport async function getTokenData(\n  connection: Connection,\n  tokenManagerId: PublicKey\n): Promise<TokenData> {\n  const tokenManagerData = await tokenManager.accounts.getTokenManager(\n    connection,\n    tokenManagerId\n  )\n\n  const mintId = tokenManagerData.parsed.mint\n  const [[metaplexId]] = await Promise.all([\n    PublicKey.findProgramAddress(\n      [\n        anchor.utils.bytes.utf8.encode(metaplex.MetadataProgram.PREFIX),\n        metaplex.MetadataProgram.PUBKEY.toBuffer(),\n        mintId.toBuffer(),\n      ],\n      metaplex.MetadataProgram.PUBKEY\n    ),\n  ])\n\n  const [[timeInvalidatorId], [useInvalidatorId]] = await Promise.all([\n    timeInvalidator.pda.findTimeInvalidatorAddress(tokenManagerId),\n    useInvalidator.pda.findUseInvalidatorAddress(tokenManagerId),\n  ])\n\n  const [\n    metaplexData,\n    timeInvalidatorData,\n    useInvalidatorData,\n    claimApproverData,\n  ] = await Promise.all([\n    metaplex.Metadata.load(connection, metaplexId).catch((e) => {\n      console.log('Failed to get metaplex data', e)\n      return null\n    }),\n    timeInvalidator.accounts\n      .getTimeInvalidator(connection, timeInvalidatorId)\n      .catch((e) => {\n        console.log('Failed to get time invalidator data', e)\n        return null\n      }),\n    useInvalidator.accounts\n      .getUseInvalidator(connection, useInvalidatorId)\n      .catch((e) => {\n        console.log('Failed to get use invalidator data', e)\n        return null\n      }),\n    claimApprover.accounts\n      .getClaimApprover(connection, tokenManagerId)\n      .catch((e) => {\n        console.log('Failed to get use invalidator data', e)\n        return null\n      }),\n  ])\n\n  let metadata: any | null = null\n  if (metaplexData) {\n    try {\n      const json = await fetch(metaplexData.data.data.uri).then((r) => r.json())\n      metadata = { pubkey: metaplexData.pubkey, data: json }\n    } catch (e) {\n      console.log('Failed to get metadata data', e)\n    }\n  }\n\n  let recipientTokenAccount: spl.AccountInfo | null = null\n  if (tokenManagerData?.parsed.recipientTokenAccount) {\n    try {\n      const mint = new spl.Token(\n        connection,\n        tokenManagerData?.parsed.mint,\n        spl.TOKEN_PROGRAM_ID,\n        // @ts-ignore\n        null\n      )\n      recipientTokenAccount = await mint.getAccountInfo(\n        tokenManagerData?.parsed.recipientTokenAccount\n      )\n    } catch (e) {\n      console.log('Failed to get recipient token account', e)\n    }\n  }\n\n  return {\n    metaplexData,\n    tokenManager: tokenManagerData,\n    claimApprover:\n      tokenManagerData.parsed.claimApprover?.toString() ===\n      claimApproverData?.pubkey?.toString()\n        ? claimApproverData\n        : undefined,\n    useInvalidator: useInvalidatorData,\n    timeInvalidator: timeInvalidatorData,\n    metadata,\n    recipientTokenAccount,\n  }\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/api/editions.ts",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/api/utils.ts",["325"],[],"import {\n  CreateMasterEditionV3,\n  CreateMetadataV2,\n  DataV2,\n  MasterEdition,\n  Metadata,\n} from '@metaplex-foundation/mpl-token-metadata'\nimport { BN } from '@project-serum/anchor'\nimport type {\n  Wallet} from '@saberhq/solana-contrib';\nimport {\n  SignerWallet,\n  SolanaProvider,\n  TransactionEnvelope\n} from '@saberhq/solana-contrib'\nimport * as splToken from '@solana/spl-token'\nimport type { Connection} from '@solana/web3.js';\nimport * as web3 from '@solana/web3.js'\nimport { Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js'\n\n/**\n * Pay and create mint and token account\n * @param connection\n * @param creator\n * @returns\n */\nexport const createMint = async (\n  connection: web3.Connection,\n  creator: web3.Keypair,\n  recipient: web3.PublicKey,\n  amount = 1,\n  freezeAuthority: web3.PublicKey = recipient\n): Promise<[web3.PublicKey, splToken.Token]> => {\n  const mint = await splToken.Token.createMint(\n    connection,\n    creator,\n    creator.publicKey,\n    freezeAuthority,\n    0,\n    splToken.TOKEN_PROGRAM_ID\n  )\n  const tokenAccount = await mint.createAssociatedTokenAccount(recipient)\n  await mint.mintTo(tokenAccount, creator.publicKey, [], amount)\n  return [tokenAccount, mint]\n}\n\ntype SimpleMetadata = { name: string; symbol: string; uri: string }\nconst airdropMetadata: SimpleMetadata[] = [\n  {\n    name: 'Portals',\n    symbol: 'PRTL',\n    uri: 'https://arweave.net/-QsrbBfmFy4Fxp-BtSnSFiajm_KECo5ctRXR6uSBS5k',\n  },\n  {\n    name: 'Portals',\n    symbol: 'PRTL',\n    uri: 'https://arweave.net/RewRYM3lf-1Ry1hitgsiXuqsuERSujlTAChgl9S483c',\n  },\n  {\n    name: 'Portals',\n    symbol: 'PRTL',\n    uri: 'https://arweave.net/6ZcTxyREtg0WsOSGSBq-CSyQ3DPlU1k4R_A7mrgehRE',\n  },\n]\nexport async function airdropNFT(\n  connection: Connection,\n  wallet: Wallet\n): Promise<string> {\n  const randInt = Math.round(Math.random() * (airdropMetadata.length - 1))\n  const metadata: SimpleMetadata = airdropMetadata[randInt]!\n  const tokenCreator = Keypair.generate()\n  const fromAirdropSignature = await connection.requestAirdrop(\n    tokenCreator.publicKey,\n    LAMPORTS_PER_SOL\n  )\n  await connection.confirmTransaction(fromAirdropSignature)\n\n  const [_masterEditionTokenAccountId, masterEditionMint] = await createMint(\n    connection,\n    tokenCreator,\n    wallet.publicKey,\n    1,\n    tokenCreator.publicKey\n  )\n\n  const masterEditionMetadataId = await Metadata.getPDA(\n    masterEditionMint.publicKey\n  )\n  const metadataTx = new CreateMetadataV2(\n    { feePayer: tokenCreator.publicKey },\n    {\n      metadata: masterEditionMetadataId,\n      metadataData: new DataV2({\n        name: metadata.name,\n        symbol: metadata.symbol,\n        uri: metadata.uri,\n        sellerFeeBasisPoints: 10,\n        creators: null,\n        collection: null,\n        uses: null,\n      }),\n      updateAuthority: tokenCreator.publicKey,\n      mint: masterEditionMint.publicKey,\n      mintAuthority: tokenCreator.publicKey,\n    }\n  )\n\n  const masterEditionId = await MasterEdition.getPDA(\n    masterEditionMint.publicKey\n  )\n  const masterEditionTx = new CreateMasterEditionV3(\n    {\n      feePayer: tokenCreator.publicKey,\n      recentBlockhash: (await connection.getRecentBlockhash('max')).blockhash,\n    },\n    {\n      edition: masterEditionId,\n      metadata: masterEditionMetadataId,\n      updateAuthority: tokenCreator.publicKey,\n      mint: masterEditionMint.publicKey,\n      mintAuthority: tokenCreator.publicKey,\n      maxSupply: new BN(1),\n    }\n  )\n\n  const txEnvelope = new TransactionEnvelope(\n    SolanaProvider.init({\n      connection: connection,\n      wallet: new SignerWallet(tokenCreator),\n      opts: {\n        commitment: 'singleGossip',\n      },\n    }),\n    [...metadataTx.instructions, ...masterEditionTx.instructions]\n  )\n  const pendingTX = await txEnvelope.send({\n    commitment: 'singleGossip',\n  })\n  console.log(\n    `Master edition (${masterEditionId.toString()}) created with metadata (${masterEditionMetadataId.toString()})`\n  )\n  return pendingTX.signature\n}\n\nexport async function getATokenAccountInfo(\n  connection: Connection,\n  mint: web3.PublicKey,\n  owner: web3.PublicKey\n): Promise<splToken.AccountInfo> {\n  const aTokenAccount = await splToken.Token.getAssociatedTokenAddress(\n    splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n    splToken.TOKEN_PROGRAM_ID,\n    mint,\n    owner\n  )\n  const token = new splToken.Token(\n    connection,\n    mint,\n    splToken.TOKEN_PROGRAM_ID,\n    // @ts-ignore\n    null\n  )\n  return token.getAccountInfo(aTokenAccount)\n}\n\nexport const tryPublicKey = (\n  publicKeyString: string | string[] | undefined\n): web3.PublicKey | null => {\n  if (!publicKeyString) return null\n  try {\n    return new web3.PublicKey(publicKeyString)\n  } catch (e) {\n    return null\n  }\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/api/wrappedSol.ts",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/Airdrop.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/Header.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/LoadingPulse.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/NFT.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/NFTOverlay.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/NFTPlaceholder.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/Notification.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/StyledBackground.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/StyledContainer.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/Tags.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/Transactions.ts",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/Wallets.tsx",["326","327","328"],[],"import type { Wallet } from '@saberhq/solana-contrib'\nimport type { WalletContextState } from '@solana/wallet-adapter-react'\n\nexport const asWallet = (wallet: WalletContextState): Wallet => {\n  return {\n    signTransaction: wallet.signTransaction!,\n    signAllTransactions: wallet.signAllTransactions!,\n    publicKey: wallet.publicKey!,\n  }\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/common/colors.ts",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/icons.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/units.ts",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/common/utils.ts",[],["329"],"/Users/jbogle/Code/cardinal-token-manager-ui/components/Browse.tsx",["330","331","332","333"],[],"import { DisplayAddress } from '@cardinal/namespaces-components'\nimport { invalidate, withClaimToken } from '@cardinal/token-manager'\nimport { findClaimApproverAddress } from '@cardinal/token-manager/dist/cjs/programs/claimApprover/pda'\nimport { TokenManagerState } from '@cardinal/token-manager/dist/cjs/programs/tokenManager'\nimport styled from '@emotion/styled'\nimport { BN } from '@project-serum/anchor'\nimport type * as splToken from '@solana/spl-token'\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport type { PublicKey } from '@solana/web3.js'\nimport { Connection, Transaction } from '@solana/web3.js'\nimport { Select } from 'antd'\nimport type { TokenData } from 'api/api'\nimport { withWrapSol } from 'api/wrappedSol'\nimport { NFT, TokensOuter } from 'common/NFT'\nimport { notify } from 'common/Notification'\nimport { StyledTag, Tag } from 'common/Tags'\nimport { executeTransaction } from 'common/Transactions'\nimport { getMintDecimalAmount } from 'common/units'\nimport { shortPubKey } from 'common/utils'\nimport { asWallet } from 'common/Wallets'\nimport { lighten } from 'polished'\nimport { useEnvironmentCtx } from 'providers/EnvironmentProvider'\nimport { useIssuedTokens } from 'providers/IssuedTokensProvider'\nimport {\n  PAYMENT_MINTS,\n  usePaymentMints,\n  WRAPPED_SOL_MINT,\n} from 'providers/PaymentMintsProvider'\nimport { getLink, useProjectConfig } from 'providers/ProjectConfigProvider'\nimport React, { useEffect, useState } from 'react'\nimport { FaLink } from 'react-icons/fa'\nimport { AsyncButton, Button } from 'rental-components/common/Button'\nimport { LoadingSpinner } from 'rental-components/common/LoadingSpinner'\n\nconst { Option } = Select\n\nconst handleCopy = (shareUrl: string) => {\n  navigator.clipboard.writeText(shareUrl)\n  notify({ message: 'Share link copied' })\n}\n\nenum OrderCategories {\n  RecentlyListed = 'Recently Listed',\n  PriceLowToHigh = 'Price: Low to High',\n  PriceHighToLow = 'Price: High to Low',\n  RateLowToHigh = 'Rate: Low to High',\n  RateHighToLow = 'Rate: High to Low',\n}\n\nconst allOrderCategories = [\n  OrderCategories.RecentlyListed,\n  OrderCategories.PriceLowToHigh,\n  OrderCategories.PriceHighToLow,\n  OrderCategories.RateLowToHigh,\n  OrderCategories.RateHighToLow,\n]\n\nconst globalRate = 604800\n\nexport const Browse = () => {\n  const { config } = useProjectConfig()\n  const { connection, environment } = useEnvironmentCtx()\n  const wallet = useWallet()\n\n  const { issuedTokens, loaded, refreshIssuedTokens } = useIssuedTokens()\n  const [filteredIssuedTokens, setFilteredIssuedTokens] =\n    useState<TokenData[]>(issuedTokens)\n  const [userPaymentTokenAccount, _setUserPaymentTokenAccount] =\n    useState<splToken.AccountInfo | null>(null)\n  const { paymentMintInfos } = usePaymentMints()\n  const [selectedOrderCategory, setSelectedOrderCategory] =\n    useState<OrderCategories>(OrderCategories.PriceLowToHigh)\n\n  const StyledSelect = styled.div`\n    .ant-select-selector {\n      min-width: 180px;\n      border: 1px solid ${lighten(0.3, config.colors.main)} !important;\n      background-color: ${lighten(0.1, config.colors.main)} !important;\n      color: ${config.colors.secondary} !important;\n    }\n    .ant-select-arrow {\n      color: ${config.colors.secondary} !important;\n    }\n  `\n\n  useEffect(() => {\n    async function filterIssuedTokens() {\n      const tokens = []\n      for (const token of issuedTokens) {\n        if (!token.claimApprover?.pubkey) {\n          tokens.push(token)\n        } else if (token.tokenManager?.pubkey) {\n          const [tokenClaimApprover] = await findClaimApproverAddress(\n            token.tokenManager?.pubkey\n          )\n          if (\n            tokenClaimApprover.toString() ===\n            token.claimApprover?.pubkey.toString()\n          ) {\n            tokens.push(token)\n          }\n        }\n      }\n\n      handleOrderCategoryChange(selectedOrderCategory, tokens)\n    }\n\n    filterIssuedTokens()\n  }, [issuedTokens])\n\n  const handleOrderCategoryChange = (\n    value: OrderCategories = selectedOrderCategory,\n    tokens: TokenData[] = filteredIssuedTokens\n  ) => {\n    switch (value) {\n      case OrderCategories.RecentlyListed:\n        setFilteredIssuedTokens(\n          tokens.sort((a, b) => {\n            return (\n              (a.tokenManager?.parsed.stateChangedAt.toNumber() ?? 0) -\n              (b.tokenManager?.parsed.stateChangedAt.toNumber() ?? 0)\n            )\n          })\n        )\n        break\n      case OrderCategories.PriceLowToHigh:\n        setFilteredIssuedTokens(\n          tokens.sort((a, b) => {\n            return (\n              (a.claimApprover?.parsed.paymentAmount.toNumber() ?? 0) -\n              (b.claimApprover?.parsed.paymentAmount.toNumber() ?? 0)\n            )\n          })\n        )\n        break\n      case OrderCategories.PriceHighToLow:\n        setFilteredIssuedTokens(\n          tokens.sort((a, b) => {\n            return (\n              (b.claimApprover?.parsed.paymentAmount.toNumber() ?? 0) -\n              (a.claimApprover?.parsed.paymentAmount.toNumber() ?? 0)\n            )\n          })\n        )\n        break\n      case OrderCategories.RateLowToHigh:\n        setFilteredIssuedTokens(\n          tokens.sort((a, b) => {\n            return calculateRateFromTokenData(a) - calculateRateFromTokenData(b)\n          })\n        )\n        break\n      case OrderCategories.RateHighToLow:\n        setFilteredIssuedTokens(\n          tokens.sort((a, b) => {\n            return calculateRateFromTokenData(b) - calculateRateFromTokenData(a)\n          })\n        )\n        break\n      default:\n        break\n    }\n  }\n\n  const handleClaim = async (tokenData: TokenData) => {\n    try {\n      if (!tokenData.tokenManager) throw new Error('No token manager data')\n      // wrap sol if there is payment required\n      const transaction = new Transaction()\n      if (\n        tokenData?.claimApprover?.parsed.paymentAmount &&\n        tokenData?.claimApprover?.parsed.paymentMint.toString() ===\n          WRAPPED_SOL_MINT.toString() &&\n        tokenData?.claimApprover?.parsed.paymentAmount.gt(new BN(0))\n      ) {\n        const amountToWrap = tokenData?.claimApprover?.parsed.paymentAmount.sub(\n          userPaymentTokenAccount?.amount || new BN(0)\n        )\n        if (amountToWrap.gt(new BN(0))) {\n          await withWrapSol(\n            transaction,\n            connection,\n            asWallet(wallet),\n            amountToWrap.toNumber()\n          )\n        }\n      }\n      console.log('Claiming token manager', tokenData)\n      await withClaimToken(\n        transaction,\n        environment.override\n          ? new Connection(environment.override)\n          : connection,\n        asWallet(wallet),\n        tokenData.tokenManager?.pubkey\n      )\n      await executeTransaction(connection, asWallet(wallet), transaction, {\n        confirmOptions: { commitment: 'confirmed', maxRetries: 3 },\n        signers: [],\n        notificationConfig: {},\n      })\n      refreshIssuedTokens()\n    } catch (e: any) {\n      console.log(e)\n    }\n  }\n\n  const getSymbolFromTokenData = (tokenData: TokenData) => {\n    const symbol = PAYMENT_MINTS.find(\n      (mint) =>\n        mint.mint === tokenData.claimApprover?.parsed?.paymentMint.toString()\n    )?.symbol\n    if (!symbol || symbol === 'SOL') {\n      return '◎'\n    } else {\n      return symbol\n    }\n  }\n\n  const getPriceFromTokenData = (tokenData: TokenData) => {\n    if (tokenData.claimApprover?.parsed) {\n      return getMintDecimalAmount(\n        paymentMintInfos[\n          tokenData.claimApprover?.parsed?.paymentMint.toString()\n        ]!,\n        tokenData.claimApprover?.parsed?.paymentAmount\n      ).toNumber()\n    } else {\n      return 0\n    }\n  }\n\n  const calculateRateFromTokenData = (\n    tokenData: TokenData,\n    rate: number = globalRate\n  ) => {\n    const price = getPriceFromTokenData(tokenData)\n    if (price === 0) return 0\n    let duration = 0\n    if (tokenData.timeInvalidator?.parsed.durationSeconds) {\n      duration = tokenData.timeInvalidator.parsed.durationSeconds.toNumber()\n    }\n    if (tokenData.timeInvalidator?.parsed.expiration) {\n      duration =\n        tokenData.timeInvalidator.parsed.expiration.toNumber() -\n        Date.now() / 1000\n    }\n    return (price / duration) * rate\n  }\n\n  const calculateFloorPrice = (tokenDatas: TokenData[]): number => {\n    const rentalPrices = tokenDatas\n      .filter((tokenData) => tokenData.timeInvalidator?.parsed)\n      .map((tokenData) => {\n        let price = 0,\n          duration = 0\n\n        if (tokenData.timeInvalidator?.parsed) {\n          if (\n            tokenData.claimApprover?.parsed?.paymentMint &&\n            paymentMintInfos &&\n            paymentMintInfos[\n              tokenData.claimApprover?.parsed?.paymentMint.toString()\n            ]\n          ) {\n            price = getPriceFromTokenData(tokenData)\n          }\n          if (tokenData.timeInvalidator.parsed.durationSeconds) {\n            duration =\n              tokenData.timeInvalidator.parsed.durationSeconds.toNumber()\n          }\n          if (tokenData.timeInvalidator.parsed.expiration) {\n            duration =\n              tokenData.timeInvalidator.parsed.expiration.toNumber() -\n              Date.now() / 1000\n          }\n        }\n        return (price / duration) * globalRate\n      })\n    if (rentalPrices.length === 0) return 0\n    return Math.min(...rentalPrices)\n  }\n\n  return (\n    <div>\n      <div className=\"d-block mx-auto\">\n        <div className=\"flex justify-center\">\n          <div className=\"d-block flex-col  border-r-2 border-gray-400 py-3 px-5\">\n            <p className=\"text-gray-400\">FLOOR PRICE / WEEK</p>\n            <h2 className=\"text-center font-bold text-gray-100\">\n              {calculateFloorPrice(filteredIssuedTokens).toFixed(2)}{' '}\n              {filteredIssuedTokens.length > 0\n                ? getSymbolFromTokenData(filteredIssuedTokens[0]!)\n                : '◎'}\n            </h2>\n          </div>\n          <div className=\"d-block flex-col  py-3 px-5\">\n            <p className=\"text-gray-400\">TOTAL LISTED</p>\n            <h2 className=\"text-center font-bold text-gray-100\">\n              {filteredIssuedTokens.length}\n            </h2>\n          </div>\n        </div>\n      </div>\n      <div className=\"flex max-w-[940px] flex-row-reverse\">\n        <StyledSelect>\n          <Select\n            className=\"m-[10px] w-max rounded-[4px] bg-black text-gray-700\"\n            onChange={(e) => {\n              setSelectedOrderCategory(e)\n              handleOrderCategoryChange(e)\n            }}\n            defaultValue={selectedOrderCategory}\n          >\n            {allOrderCategories.map((category) => (\n              <Option key={category} value={category}>\n                {category}\n              </Option>\n            ))}\n          </Select>\n        </StyledSelect>\n      </div>\n      <TokensOuter>\n        {filteredIssuedTokens && filteredIssuedTokens.length > 0 ? (\n          filteredIssuedTokens.map((tokenData) => (\n            <div\n              key={tokenData.tokenManager?.pubkey.toString()}\n              style={{\n                paddingTop: '10px',\n                display: 'flex',\n                gap: '10px',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <>\n                <NFT\n                  key={tokenData?.tokenManager?.pubkey.toBase58()}\n                  tokenData={tokenData}\n                  hideQRCode={true}\n                ></NFT>\n                {\n                  {\n                    [TokenManagerState.Initialized]: <>Initiliazed</>,\n                    [TokenManagerState.Issued]: (\n                      <div className=\"flex w-full justify-between\">\n                        <StyledTag>\n                          <div\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                              justifyContent: 'space-between',\n                              width: '100%',\n                            }}\n                          >\n                            <Tag\n                              state={TokenManagerState.Issued}\n                              color=\"warning\"\n                            >\n                              <div className=\"float-left\">\n                                <p className=\"float-left inline-block\">\n                                  {new Date(\n                                    Number(\n                                      tokenData.tokenManager?.parsed.stateChangedAt.toString()\n                                    ) * 1000\n                                  ).toLocaleString('en-US', {\n                                    year: 'numeric',\n                                    month: 'numeric',\n                                    day: 'numeric',\n                                    hour: 'numeric',\n                                    minute: '2-digit',\n                                  })}\n                                </p>\n                                <br />{' '}\n                                <DisplayAddress\n                                  connection={connection}\n                                  address={\n                                    tokenData.tokenManager?.parsed.issuer ||\n                                    undefined\n                                  }\n                                  height=\"12px\"\n                                  width=\"100px\"\n                                  dark={true}\n                                />{' '}\n                              </div>\n                            </Tag>\n                          </div>\n                        </StyledTag>\n                        <div className=\"flex w-max\">\n                          <AsyncButton\n                            bgColor={config.colors.secondary}\n                            variant=\"primary\"\n                            className=\"mr-1 inline-block flex-none\"\n                            handleClick={() => handleClaim(tokenData)}\n                          >\n                            <>\n                              Claim{' '}\n                              {(tokenData.claimApprover?.parsed?.paymentAmount.toNumber() ??\n                                0) / 1000000000}{' '}\n                              {getSymbolFromTokenData(tokenData)}{' '}\n                            </>\n                          </AsyncButton>\n                          <Button\n                            variant=\"tertiary\"\n                            className=\"mr-1 inline-block flex-none\"\n                            onClick={() =>\n                              handleCopy(\n                                getLink(\n                                  `/claim/${tokenData.tokenManager?.pubkey.toBase58()}`\n                                )\n                              )\n                            }\n                          >\n                            <FaLink />\n                          </Button>\n                        </div>\n                      </div>\n                    ),\n                    [TokenManagerState.Claimed]: (\n                      <StyledTag>\n                        <Tag state={TokenManagerState.Claimed}>\n                          Claimed by{' '}\n                          {shortPubKey(\n                            tokenData.recipientTokenAccount?.owner || ''\n                          )}{' '}\n                          {/* {shortDateString(\n                          tokenData.tokenManager?.parsed.claimedAt\n                        )} */}\n                        </Tag>\n                        {((wallet.publicKey &&\n                          tokenData?.tokenManager?.parsed.invalidators &&\n                          tokenData?.tokenManager?.parsed.invalidators\n                            .map((i: PublicKey) => i.toString())\n                            .includes(wallet.publicKey?.toString())) ||\n                          (tokenData.timeInvalidator &&\n                            tokenData.timeInvalidator.parsed.expiration &&\n                            tokenData.timeInvalidator.parsed.expiration.lte(\n                              new BN(Date.now() / 1000)\n                            )) ||\n                          (tokenData.useInvalidator &&\n                            tokenData.useInvalidator.parsed.maxUsages &&\n                            tokenData.useInvalidator.parsed.usages.gte(\n                              tokenData.useInvalidator.parsed.maxUsages\n                            ))) && (\n                          <Button\n                            variant=\"primary\"\n                            disabled={!wallet.connected}\n                            onClick={async () => {\n                              tokenData?.tokenManager &&\n                                executeTransaction(\n                                  connection,\n                                  asWallet(wallet),\n                                  await invalidate(\n                                    connection,\n                                    asWallet(wallet),\n                                    tokenData?.tokenManager?.parsed.mint\n                                  ),\n                                  {\n                                    callback: refreshIssuedTokens,\n                                    silent: true,\n                                  }\n                                )\n                            }}\n                          >\n                            Revoke\n                          </Button>\n                        )}\n                      </StyledTag>\n                    ),\n                    [TokenManagerState.Invalidated]: (\n                      <Tag state={TokenManagerState.Invalidated}>\n                        Invalidated\n                        {/* {shortDateString(\n                    tokenData.tokenManager?.parsed.claimedAt\n                  )} */}\n                      </Tag>\n                    ),\n                  }[tokenData?.tokenManager?.parsed.state as TokenManagerState]\n                }\n              </>\n            </div>\n          ))\n        ) : loaded ? (\n          <div className=\"white flex w-full flex-col items-center justify-center gap-1\">\n            <div className=\"text-white\">No outstanding tokens!</div>\n          </div>\n        ) : (\n          <div className=\"flex w-full items-center justify-center\">\n            <LoadingSpinner />\n          </div>\n        )}\n      </TokensOuter>\n    </div>\n  )\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/components/Manage.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/components/Wallet.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/config/config.ts",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/next-env.d.ts",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/pages/[host]/[addressId].tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/pages/[host]/claim/[tokenManagerString].tsx",["334","335","336","337","338","339"],[],"/Users/jbogle/Code/cardinal-token-manager-ui/pages/[host]/index.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/pages/[host]/scan.tsx",["340","341","342"],[],"import styled from '@emotion/styled'\nimport type { PublicKey } from '@solana/web3.js'\nimport { sendAndConfirmRawTransaction, Transaction } from '@solana/web3.js'\nimport { Header } from 'common/Header'\nimport { LoadingPulseWrapped } from 'common/LoadingPulse'\nimport { StyledBackground } from 'common/StyledBackground'\nimport { firstParam, pubKeyUrl } from 'common/utils'\nimport { useRouter } from 'next/router'\nimport { useEnvironmentCtx } from 'providers/EnvironmentProvider'\nimport React, { useEffect, useState } from 'react'\nimport { FaCheckCircle, FaQuestionCircle } from 'react-icons/fa'\n\ntype Hideable = {\n  visible?: boolean\n}\n\nconst VerificationStepsOuter = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-top: calc(50vh - 250px);\n  padding-bottom: calc(50vh - 250px);\n  width: 90%;\n  margin: 0px auto;\n  font-weight: 200;\n  text-transform: uppercase;\n  font-family: Oswald, sans-serif;\n`\n\nenum VerificationStatus {\n  WARNING,\n  ERROR,\n  SUCCESS,\n}\n\ntype VerficationResult = {\n  status: VerificationStatus\n  data?: any\n}\n\ninterface Verifiable extends Hideable {\n  status?: VerificationStatus\n}\n\nconst formatError = (error: string): string => {\n  if (error.includes('0x1774')) {\n    return 'No more usages remaining'\n  } else {\n    return error\n  }\n}\n\nconst VerificationStep = styled.div<Verifiable>`\n  text-align: center;\n  // background-color: rgba(50,50,50,0.2);\n  transition: height 0.3s;\n  height: ${(props) => (props.visible ? '500px' : '0px')};\n  border-radius: 10px;\n  margin: 0px auto;\n  width: 90%;\n  max-width: 500px;\n  box-shadow: ${(props) => {\n    if (props.visible) {\n      switch (props.status) {\n        case VerificationStatus.WARNING:\n          return '0 0 30px 20px rgba(255, 200, 50, 0.5)'\n        case VerificationStatus.ERROR:\n          return '0 0 30px 20px rgba(255, 0, 50, 0.3)'\n        default:\n          return '0 0 80px 50px rgba(255, 255, 255, 0.3)'\n      }\n    }\n  }};\n  color: white;\n  position: relative;\n  overflow: hidden;\n\n  .header {\n    position: relative;\n    padding: 28px 28px 0px 28px;\n    z-index: 1;\n  }\n\n  .step-name {\n    font-size: 28px;\n    font-weight: 400;\n  }\n\n  .address {\n    text-decoration: none;\n    color: white;\n    width: 100%;\n    overflow-wrap: break-word;\n    transition: 0.2s all;\n\n    &:hover {\n      cursor: pointer;\n      text-shadow: 0 0 10px #fff;\n    }\n  }\n\n  .addresses {\n    width: 100%;\n    max-height: 65px;\n    overflow: scroll;\n    overflow-wrap: break-word;\n  }\n\n  .footer {\n  }\n\n  .content {\n    position: absolute;\n    top: 58%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 80%;\n    &:after {\n      content: '';\n      display: block;\n      padding-bottom: 100%;\n    }\n\n    .asset {\n      img {\n        width: 85%;\n        border-radius: 10px;\n      }\n    }\n\n    i {\n      font-size: 170px;\n    }\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: -110%;\n    left: -210%;\n    width: 200%;\n    height: 200%;\n    opacity: 0;\n    transform: rotate(30deg);\n\n    background: rgba(255, 255, 255, 0.13);\n    background: linear-gradient(\n      to right,\n      rgba(255, 255, 255, 0.13) 0%,\n      rgba(255, 255, 255, 0.13) 77%,\n      rgba(255, 255, 255, 0.5) 92%,\n      rgba(255, 255, 255, 0) 100%\n    );\n\n    &:hover {\n      opacity: 1;\n      top: -30%;\n      left: -30%;\n      transition-property: left, top, opacity;\n      transition-duration: 0.7s, 0.7s, 0.15s;\n      transition-timing-function: ease;\n    }\n  }\n`\nfunction Scan() {\n  const router = useRouter()\n  const { tx } = router.query\n  const ctx = useEnvironmentCtx()\n\n  // step 1\n  const [owner, setOwner] = useState<PublicKey | undefined>(undefined)\n  const [error, setError] = useState<string | null>(null)\n  const [executeResult, setExecuteResult] = useState<\n    VerficationResult | undefined\n  >(undefined)\n\n  useEffect(() => {\n    if (tx) {\n      handleExecute()\n    }\n  }, [setError, tx])\n\n  const handleExecute = async () => {\n    const executePromise: Promise<VerficationResult> = new Promise(\n      async (res) => {\n        try {\n          // get owner from signature and check ownership\n          const buffer = Buffer.from(\n            decodeURIComponent(firstParam(tx)),\n            'base64'\n          )\n          const transaction = Transaction.from(buffer)\n          setOwner(transaction.feePayer)\n          const txid = await sendAndConfirmRawTransaction(\n            ctx.connection,\n            transaction.serialize(),\n            { commitment: 'singleGossip' }\n          )\n          console.log('TX: ', txid)\n          return res({ status: VerificationStatus.SUCCESS })\n        } catch (e: any) {\n          console.log(e)\n          setError(e)\n          return res({ status: VerificationStatus.ERROR })\n        }\n      }\n    )\n\n    const [executeResult] = await Promise.all([executePromise])\n    setExecuteResult(executeResult)\n  }\n\n  return (\n    <>\n      <Header />\n      <VerificationStepsOuter>\n        <VerificationStep visible={true} status={executeResult?.status}>\n          <div className=\"header\">\n            <div className=\"step-name\">Using Asset</div>\n            <div className=\"addresses\">\n              {/* {decodeURIComponent(firstParam(tx))} */}\n            </div>\n          </div>\n          <div className=\"content\">\n            <LoadingPulseWrapped loading={!executeResult}>\n              {executeResult?.status === VerificationStatus.SUCCESS ? (\n                <>\n                  <div\n                    style={{\n                      fontSize: '170px',\n                      display: 'flex',\n                      justifyContent: 'center',\n                    }}\n                  >\n                    <FaCheckCircle />\n                  </div>\n                  <div className=\"footer\" style={{ marginTop: '25px' }}>\n                    Use transaction signed by{' '}\n                    <a\n                      className=\"address\"\n                      href={pubKeyUrl(owner, ctx.environment.label)}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      {owner?.toString()}\n                    </a>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div\n                    style={{\n                      fontSize: '170px',\n                      display: 'flex',\n                      justifyContent: 'center',\n                    }}\n                  >\n                    <FaQuestionCircle />\n                  </div>\n                  {error && (\n                    <div className=\"footer\" style={{ marginTop: '25px' }}>\n                      {formatError(`${error}`)}\n                    </div>\n                  )}\n                </>\n              )}\n            </LoadingPulseWrapped>\n          </div>\n        </VerificationStep>\n      </VerificationStepsOuter>\n      <StyledBackground />\n    </>\n  )\n}\n\nexport default Scan\n","/Users/jbogle/Code/cardinal-token-manager-ui/pages/_app.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/pages/_document.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/providers/EnvironmentProvider.tsx",["343","344"],[],"import { Connection } from '@solana/web3.js'\nimport { useRouter } from 'next/router'\nimport React, { useContext,useMemo, useState } from 'react'\n\nexport interface Environment {\n  label: string\n  value: string\n  override?: string\n}\n\nexport interface EnvironmentContextValues {\n  environment: Environment\n  setEnvironment: (newEnvironment: Environment) => void\n  connection: Connection\n}\n\nexport const ENVIRONMENTS: Environment[] = [\n  {\n    label: 'mainnet',\n    value:\n      'https://solana-api.syndica.io/access-token/bkBr4li7aGVa3euVG0q4iSI6uuMiEo2jYQD35r8ytGZrksM7pdJi2a57pmlYRqCw',\n    override: 'https://ssc-dao.genesysgo.net',\n  },\n  {\n    label: 'testnet',\n    value: 'https://api.testnet.solana.com',\n  },\n  {\n    label: 'devnet',\n    value: 'https://api.devnet.solana.com',\n  },\n  {\n    label: 'localnet',\n    value: 'http://127.0.0.1:8899',\n  },\n]\n\nconst EnvironmentContext: React.Context<null | EnvironmentContextValues> =\n  React.createContext<null | EnvironmentContextValues>(null)\n\nexport function EnvironmentProvider({\n  children,\n}: {\n  children: React.ReactChild\n}) {\n  const { query } = useRouter()\n  const cluster = (query.project || query.host)?.includes('dev')\n    ? 'devnet'\n    : query.cluster || process.env.BASE_CLUSTER\n  const foundEnvironment = ENVIRONMENTS.find((e) => e.label === cluster)\n  const [environment, setEnvironment] = useState<Environment>(\n    foundEnvironment ?? ENVIRONMENTS[0]!\n  )\n\n  useMemo(() => {\n    const foundEnvironment = ENVIRONMENTS.find((e) => e.label === cluster)\n    setEnvironment(foundEnvironment ?? ENVIRONMENTS[2]!)\n  }, [cluster])\n\n  const connection = useMemo(\n    () => new Connection(environment.value, { commitment: 'recent' }),\n    [environment]\n  )\n\n  return (\n    <EnvironmentContext.Provider\n      value={{\n        environment,\n        setEnvironment,\n        connection,\n      }}\n    >\n      {children}\n    </EnvironmentContext.Provider>\n  )\n}\n\nexport function useEnvironmentCtx(): EnvironmentContextValues {\n  const context = useContext(EnvironmentContext)\n  if (!context) {\n    throw new Error('Missing connection context')\n  }\n  return context\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/providers/ErrorProvider.tsx",["345","346"],[],"import { Alert } from 'antd'\nimport type { ReactChild } from 'react';\nimport React, { useContext, useEffect,useState } from 'react'\n\nconst ErrorContext: React.Context<null | any> = React.createContext<null | any>(\n  null\n)\n\nexport function ErrorProvider({ children }: { children: ReactChild }) {\n  const [error, setError] = useState(null)\n  const [styledError, setStyledError] = useState(null)\n  useEffect(() => {\n    setStyledError(\n      error && (\n        <Alert\n          style={{ marginBottom: '10px' }}\n          message=\"Error\"\n          description={error}\n          type=\"error\"\n          showIcon\n          closable\n        />\n      )\n    )\n  }, [error])\n  return (\n    <ErrorContext.Provider\n      value={{\n        setError,\n        styledError,\n      }}\n    >\n      {children}\n    </ErrorContext.Provider>\n  )\n}\n\nexport function useError() {\n  const ctx = useContext(ErrorContext)\n  return ctx ? [ctx.styledError, ctx.setError] : []\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/providers/IssuedTokensProvider.tsx",["347"],[],"import { TokenManagerState } from '@cardinal/token-manager/dist/cjs/programs/tokenManager'\nimport { getTokenManagersByState } from '@cardinal/token-manager/dist/cjs/programs/tokenManager/accounts'\nimport type { TokenData } from 'api/api'\nimport { getTokenDatas } from 'api/api'\nimport type { ReactChild } from 'react'\nimport React, { useContext, useEffect, useState } from 'react'\n\nimport { useEnvironmentCtx } from './EnvironmentProvider'\nimport { filterTokens, useProjectConfig } from './ProjectConfigProvider'\nimport { useUserTokenData } from './TokenDataProvider'\n\nexport interface IssuedTokensContextValues {\n  issuedTokens: TokenData[]\n  refreshIssuedTokens: () => void\n  refreshing: boolean\n  loaded: boolean\n  error: string | null\n}\n\nconst IssuedTokensContext: React.Context<IssuedTokensContextValues> =\n  React.createContext<IssuedTokensContextValues>({\n    issuedTokens: [],\n    refreshIssuedTokens: () => {},\n    refreshing: true,\n    loaded: false,\n    error: null,\n  })\n\nexport function IssuedTokensProvider({ children }: { children: ReactChild }) {\n  const { config } = useProjectConfig()\n  const { connection } = useEnvironmentCtx()\n  const { tokenDatas } = useUserTokenData()\n  const [issuedTokens, setIssuedTokens] = useState<TokenData[]>([])\n  const [refreshing, setRefreshing] = useState<boolean>(false)\n  const [loaded, setLoaded] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const refreshIssuedTokens = async () => {\n    try {\n      if (!config) return\n      setRefreshing(true)\n      const tokenManagerDatas = await getTokenManagersByState(\n        connection,\n        TokenManagerState.Issued\n      )\n      let tokenDatas = await getTokenDatas(connection, tokenManagerDatas)\n      tokenDatas = filterTokens(config.filters, tokenDatas)\n      setIssuedTokens(tokenDatas)\n    } catch (e) {\n      console.log(e)\n      setError(`${e}`)\n    } finally {\n      setLoaded(true)\n      setRefreshing(false)\n    }\n  }\n\n  useEffect(() => {\n    refreshIssuedTokens()\n  }, [connection, setError, setRefreshing, tokenDatas, config])\n\n  return (\n    <IssuedTokensContext.Provider\n      value={{\n        issuedTokens,\n        refreshIssuedTokens,\n        refreshing,\n        loaded,\n        error,\n      }}\n    >\n      {children}\n    </IssuedTokensContext.Provider>\n  )\n}\n\nexport function useIssuedTokens(): IssuedTokensContextValues {\n  return useContext(IssuedTokensContext)\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/providers/ManagedTokensProvider.tsx",["348"],[],"import { getTokenManagersForIssuer } from '@cardinal/token-manager/dist/cjs/programs/tokenManager/accounts'\nimport { web3 } from '@project-serum/anchor'\nimport type { TokenData } from 'api/api'\nimport { getTokenDatas } from 'api/api'\nimport type { ReactChild } from 'react'\nimport React, { useContext, useEffect, useState } from 'react'\n\nimport { useEnvironmentCtx } from './EnvironmentProvider'\nimport { filterTokens, useProjectConfig } from './ProjectConfigProvider'\nimport { useUserTokenData } from './TokenDataProvider'\n\nexport interface ManagedTokensContextValues {\n  managedTokens: TokenData[]\n  refreshManagedTokens: () => void\n  refreshing: boolean\n  loaded: boolean\n  error: string | null\n}\n\nconst ManagedTokensContext: React.Context<ManagedTokensContextValues> =\n  React.createContext<ManagedTokensContextValues>({\n    managedTokens: [],\n    refreshManagedTokens: () => {},\n    refreshing: true,\n    loaded: false,\n    error: null,\n  })\n\nexport function ManagedTokensProvider({ children }: { children: ReactChild }) {\n  const { connection } = useEnvironmentCtx()\n  const { address, tokenDatas } = useUserTokenData()\n  const [managedTokens, setManagedTokens] = useState<TokenData[]>([])\n  const [refreshing, setRefreshing] = useState<boolean>(false)\n  const [loaded, setLoaded] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const { config } = useProjectConfig()\n\n  const refreshManagedTokens = async () => {\n    if (!address) {\n      setError(`Address not set please connect wallet to continue`)\n      return\n    }\n    try {\n      if (!config) return\n      setRefreshing(true)\n      const tokenManagerDatas = await getTokenManagersForIssuer(\n        connection,\n        new web3.PublicKey(address)\n      )\n      let tokenDatas = await getTokenDatas(connection, tokenManagerDatas)\n      tokenDatas = filterTokens(config.filters, tokenDatas)\n      setManagedTokens(tokenDatas)\n    } catch (e) {\n      console.log(e)\n      setError(`${e}`)\n    } finally {\n      setLoaded(true)\n      setRefreshing(false)\n    }\n  }\n\n  useEffect(() => {\n    refreshManagedTokens()\n  }, [connection, setError, address, tokenDatas, setRefreshing])\n\n  return (\n    <ManagedTokensContext.Provider\n      value={{\n        managedTokens,\n        refreshManagedTokens,\n        refreshing,\n        loaded,\n        error,\n      }}\n    >\n      {children}\n    </ManagedTokensContext.Provider>\n  )\n}\n\nexport function useManagedTokens(): ManagedTokensContextValues {\n  return useContext(ManagedTokensContext)\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/providers/PaymentMintsProvider.tsx",["349","350","351","352"],[],"import { web3 } from '@project-serum/anchor'\nimport * as splToken from '@solana/spl-token'\nimport type { ReactChild } from 'react'\nimport React, { useContext, useEffect, useState } from 'react'\n\nimport { useEnvironmentCtx } from './EnvironmentProvider'\n\nexport const PAYMENT_MINTS = [\n  {\n    mint: 'So11111111111111111111111111111111111111112',\n    symbol: 'SOL',\n  },\n  {\n    mint: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    symbol: 'USDC',\n  },\n  { mint: '2tWC4JAdL4AxEFJySziYJfsAnW2MHKRo98vbAPiRDSk8', symbol: 'USDC' },\n  {\n    mint: 'Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1',\n    symbol: 'SBR',\n  },\n]\n\nexport const WRAPPED_SOL_MINT = 'So11111111111111111111111111111111111111112'\n\nexport interface PaymentMintsContextValues {\n  paymentMintInfos: { [name: string]: splToken.MintInfo }\n  refreshPaymentMints: () => void\n  refreshing: boolean\n  error: string | null\n}\n\nconst PaymentMintsContext: React.Context<PaymentMintsContextValues> =\n  React.createContext<PaymentMintsContextValues>({\n    paymentMintInfos: {},\n    refreshPaymentMints: () => {},\n    refreshing: false,\n    error: null,\n  })\n\nexport function PaymentMintsProvider({ children }: { children: ReactChild }) {\n  const ctx = useEnvironmentCtx()\n  const [paymentMintInfos, setPaymentMintInfos] = useState({})\n  const [refreshing, setRefreshing] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const refreshPaymentMints = async () => {\n    setRefreshing(true)\n    const paymentMintInfoMap: { [k: string]: splToken.MintInfo } = {}\n    for (let i = 0; i < PAYMENT_MINTS.length; i++) {\n      try {\n        const paymentToken = new splToken.Token(\n          ctx.connection,\n          new web3.PublicKey(PAYMENT_MINTS[i]!.mint),\n          splToken.TOKEN_PROGRAM_ID,\n          // @ts-ignore\n          null\n        )\n        const mintInfo = await paymentToken.getMintInfo()\n        paymentMintInfoMap[PAYMENT_MINTS[i]!.mint] = mintInfo\n      } catch (e: any) {\n        setError(`${e}`)\n      }\n    }\n    setPaymentMintInfos(paymentMintInfoMap)\n    setRefreshing(false)\n  }\n\n  useEffect(() => {\n    refreshPaymentMints()\n  }, [ctx.connection])\n\n  return (\n    <PaymentMintsContext.Provider\n      value={{\n        paymentMintInfos,\n        refreshPaymentMints,\n        refreshing,\n        error,\n      }}\n    >\n      {children}\n    </PaymentMintsContext.Provider>\n  )\n}\n\nexport function usePaymentMints(): PaymentMintsContextValues {\n  const context = useContext(PaymentMintsContext)\n  return context\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/providers/ProjectConfigProvider.tsx",["353","354"],[],"import type { TokenData } from 'api/api'\nimport type { ProjectConfig } from 'config/config'\nimport { projectConfigs } from 'config/config'\nimport { useRouter } from 'next/router'\nimport type { ReactChild } from 'react'\nimport React, { useContext } from 'react'\n\nexport const filterTokens = (\n  filters: { type: string; value: string }[],\n  tokens: TokenData[]\n): TokenData[] => {\n  if (filters.length > 0) {\n    filters.forEach((configFilter) => {\n      if (configFilter.type === 'creators') {\n        tokens = tokens.filter(\n          (token) =>\n            token.metadata.data.properties &&\n            token.metadata.data.properties.creators.some(\n              (creator: { address: string }) =>\n                creator.address === configFilter.value\n            )\n        )\n      } else if (configFilter.type === 'symbol') {\n        tokens = tokens.filter(\n          (token) => token.metadata.data.symbol === configFilter.value\n        )\n      }\n    })\n  }\n  return tokens\n}\n\nexport function getLink(path: string, withParams = true) {\n  return `${window.location.origin}${path}${\n    withParams\n      ? path.includes('?') && window.location.search\n        ? `${window.location.search.replace('?', '&')}`\n        : window.location.search ?? ''\n      : ''\n  }`\n}\n\nexport interface ProjectConfigValues {\n  config: ProjectConfig\n}\n\nconst ProjectConfigValues: React.Context<ProjectConfigValues> =\n  React.createContext<ProjectConfigValues>({\n    config: projectConfigs['default']!,\n  })\n\nexport function ProjectConfigProvider({ children }: { children: ReactChild }) {\n  const { query } = useRouter()\n  const projectParams = query.project || query.host\n  const project =\n    projectParams &&\n    (typeof projectParams === 'string' ? projectParams : projectParams[0])\n      ?.split('.')[0]\n      ?.replace('dev-', '')\n  const config =\n    (project && projectConfigs[project]) || projectConfigs['default']!\n\n  return (\n    <ProjectConfigValues.Provider\n      value={{\n        config: config,\n      }}\n    >\n      {children}\n    </ProjectConfigValues.Provider>\n  )\n}\n\nexport function useProjectConfig(): ProjectConfigValues {\n  return useContext(ProjectConfigValues)\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/providers/TokenDataProvider.tsx",["355"],[],"import type { TokenData } from 'api/api'\nimport { getTokenAccountsWithData } from 'api/api'\nimport type { ReactChild } from 'react'\nimport React, { useCallback, useContext, useEffect, useState } from 'react'\n\nimport { useEnvironmentCtx } from './EnvironmentProvider'\nimport { filterTokens, useProjectConfig } from './ProjectConfigProvider'\n\nexport interface UserTokenDataValues {\n  tokenDatas: TokenData[]\n  refreshTokenAccounts: () => void\n  setTokenDatas: (newEnvironment: TokenData[]) => void\n  setAddress: (address: string) => void\n  loaded: boolean\n  refreshing: boolean\n  address: string | null\n  error: string | null\n}\n\nconst UserTokenData: React.Context<UserTokenDataValues> =\n  React.createContext<UserTokenDataValues>({\n    tokenDatas: [],\n    refreshTokenAccounts: () => {},\n    setTokenDatas: () => {},\n    setAddress: () => {},\n    loaded: false,\n    refreshing: true,\n    address: null,\n    error: null,\n  })\n\nexport function TokenAccountsProvider({ children }: { children: ReactChild }) {\n  const { connection } = useEnvironmentCtx()\n  const [address, setAddress] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [tokenDatas, setTokenDatas] = useState<TokenData[]>([])\n  const [refreshing, setRefreshing] = useState<boolean>(false)\n  const [loaded, setLoaded] = useState<boolean>(false)\n  const { config } = useProjectConfig()\n\n  const refreshTokenAccounts = useCallback(() => {\n    if (!address) {\n      setError(`Address not set please connect wallet to continue`)\n      return\n    }\n    if (!config) {\n      setError(`No project config found`)\n      return\n    }\n    setRefreshing(true)\n    setError(null)\n    getTokenAccountsWithData(connection, address)\n      .then((tokenDatas) => {\n        let tokensWithMetadata = tokenDatas.filter((td) => td.metadata)\n        tokensWithMetadata = filterTokens(config.filters, tokensWithMetadata)\n        setTokenDatas(tokensWithMetadata)\n      })\n      .catch((e) => {\n        console.log(e)\n        setError(`${e}`)\n      })\n      .finally(() => {\n        setLoaded(true)\n        setRefreshing(false)\n      })\n  }, [connection, setError, address, setRefreshing, config])\n\n  useEffect(() => {\n    const interval = setInterval(\n      (function getTokenAccountsInterval(): any {\n        refreshTokenAccounts()\n        return getTokenAccountsInterval\n      })(),\n      10000\n    )\n    return () => clearInterval(interval)\n  }, [refreshTokenAccounts])\n\n  return (\n    <UserTokenData.Provider\n      value={{\n        address,\n        tokenDatas,\n        loaded,\n        refreshTokenAccounts,\n        setTokenDatas,\n        setAddress,\n        refreshing,\n        error,\n      }}\n    >\n      {children}\n    </UserTokenData.Provider>\n  )\n}\n\nexport function useUserTokenData(): UserTokenDataValues {\n  return useContext(UserTokenData)\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/providers/UTCNowProvider.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/QRCodeProvider.tsx",["356"],[],"import type { Wallet } from '@saberhq/solana-contrib'\nimport type { Connection } from '@solana/web3.js'\nimport type { TokenData } from 'api/api'\nimport React, { useContext, useState } from 'react'\nimport QRCode from 'rental-components/common/QRCode'\n\nimport { Modal } from './modal'\n\nexport interface QRCode {\n  show: (\n    connection: Connection,\n    wallet: Wallet,\n    tokenData: TokenData,\n    cluster?: string,\n    dev?: boolean\n  ) => void\n  showQRCode: boolean\n  tokenData: TokenData | undefined\n}\n\nexport const QRCodeContext = React.createContext<QRCode | null>(null)\n\ninterface Props {\n  appName?: string\n  appTwitter?: string\n  children: React.ReactNode\n}\n\nexport const QRCodeProvider: React.FC<Props> = ({ children }: Props) => {\n  const [wallet, setWallet] = useState<Wallet | undefined>(undefined)\n  const [connection, setConnection] = useState<Connection | undefined>(\n    undefined\n  )\n  const [cluster, setCluster] = useState<string | undefined>(undefined)\n  const [dev, setDev] = useState<boolean | undefined>(undefined)\n  const [showQRCode, setShowQRCode] = useState<boolean>(false)\n  const [tokenData, setTokenData] = useState<TokenData | undefined>(undefined)\n\n  return (\n    <QRCodeContext.Provider\n      value={{\n        show: (connection, wallet, tokenData, cluster, dev) => {\n          setConnection(connection)\n          setWallet(wallet)\n          setTokenData(tokenData)\n          setCluster(cluster)\n          setDev(dev)\n          setShowQRCode(true)\n        },\n        tokenData,\n        showQRCode,\n      }}\n    >\n      <Modal\n        isOpen={showQRCode}\n        onDismiss={() => setShowQRCode(false)}\n        darkenOverlay={true}\n        topArea={false}\n        fitContent={true}\n        borderRadius=\"30px\"\n        maxWidth=\"90vw\"\n        dark={true}\n      >\n        <QRCode\n          connection={connection}\n          wallet={wallet}\n          cluster={cluster}\n          tokenData={tokenData}\n        ></QRCode>\n      </Modal>\n      {children}\n    </QRCodeContext.Provider>\n  )\n}\n\nexport const useQRCode = (): QRCode => {\n  const qrCodeContext = useContext(QRCodeContext)\n  if (!qrCodeContext) {\n    throw new Error('Not in QRCodeContext context')\n  }\n  return qrCodeContext\n}\n","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/RentalExtensionModalProvider.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/RentalModalProvider.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/Alert.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/Button.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/ButtonWithFooter.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/Constants.ts",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/LabeledInput.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/LoadingSpinner.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/Logo.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/LogoTitled.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/MintPriceSelector.tsx",["357"],[],"import styled from '@emotion/styled'\nimport { BN } from '@project-serum/anchor'\nimport { InputNumber, Select } from 'antd'\nimport { fmtMintAmount, parseMintNaturalAmountFromDecimal } from 'common/units'\nimport { PAYMENT_MINTS,usePaymentMints } from 'providers/PaymentMintsProvider'\nimport React from 'react'\n\nconst { Option } = Select\n\nexport const MintPriceSelector = ({\n  price,\n  mint,\n  disabled,\n  mintDisabled,\n  handlePrice,\n  handleMint,\n}: {\n  price: number\n  mint: string\n  disabled?: boolean\n  mintDisabled?: boolean\n  handlePrice: (p: number) => void\n  handleMint: (m: string) => void\n}) => {\n  const { paymentMintInfos } = usePaymentMints()\n  const paymentMintInfo = paymentMintInfos[mint]\n\n  return (\n    <SelectorOuter>\n      <InputNumber\n        className=\"rounded-[4px]\"\n        style={{ width: '100%' }}\n        placeholder=\"Price\"\n        stringMode\n        disabled={disabled}\n        value={\n          paymentMintInfo ? fmtMintAmount(paymentMintInfo, new BN(price)) : '0'\n        }\n        min=\"0\"\n        step={1 / 10 ** 4}\n        onChange={(e) =>\n          handlePrice(\n            parseMintNaturalAmountFromDecimal(e, paymentMintInfo?.decimals || 1)\n          )\n        }\n      />\n      <Select\n        onChange={(e) => handleMint(e)}\n        defaultValue={PAYMENT_MINTS[0]!.mint}\n        disabled={disabled || mintDisabled}\n      >\n        {PAYMENT_MINTS.map(\n          ({ mint, symbol }) =>\n            paymentMintInfos[mint] && (\n              <Option key={mint} value={mint}>\n                {symbol}\n              </Option>\n            )\n        )}\n      </Select>\n    </SelectorOuter>\n  )\n}\n\nconst SelectorOuter = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n\n  .ant-select-selector {\n    border-radius: 4px;\n  }\n`\n","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/PoweredByFooter.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/QRCode.tsx",["358","359","360","361"],["362"],"import { useTransaction } from '@cardinal/token-manager'\nimport styled from '@emotion/styled'\nimport type { Wallet } from '@saberhq/solana-contrib'\nimport type { Connection } from '@solana/web3.js'\nimport type { TokenData } from 'api/api'\nimport { AwesomeQR } from 'awesome-qr'\nimport { getLink } from 'providers/ProjectConfigProvider'\nimport { useCallback, useEffect, useState } from 'react'\nimport { LoadingSpinner } from 'rental-components/common/LoadingSpinner'\n\nconst QRCode = ({\n  connection,\n  wallet,\n  tokenData,\n  cluster,\n}: {\n  connection?: Connection\n  wallet?: Wallet\n  tokenData?: TokenData\n  cluster?: string\n}) => {\n  const [qrCode, setQrCode] = useState<any | null>(null)\n  const getQRCode = useCallback(async () => {\n    if (wallet && connection) {\n      try {\n        if (!tokenData?.tokenManager) throw new Error('No token manager found')\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const transaction = await useTransaction(\n          connection,\n          wallet,\n          tokenData.tokenManager.parsed.mint,\n          1\n        )\n        transaction.feePayer = wallet.publicKey\n        transaction.recentBlockhash = (\n          await connection.getRecentBlockhash('max')\n        ).blockhash\n        await wallet.signTransaction(transaction)\n        const serializedUsage = transaction.serialize().toString('base64')\n        console.log(getLink(`/scan?tx=${encodeURIComponent(serializedUsage)}`))\n        const qrbuffer = await new AwesomeQR({\n          text: getLink(`/scan?tx=${encodeURIComponent(serializedUsage)}`),\n          colorDark: '#000000',\n          colorLight: '#555555',\n          backgroundDimming: 'rgba(0, 0, 0, 4)',\n          margin: 0,\n        }).draw()\n        // @ts-ignore\n        setQrCode(qrbuffer)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(\n      (function getQRCodeInterval(): any {\n        getQRCode()\n        return getQRCodeInterval\n      })(),\n      10000\n    )\n    return () => clearInterval(interval)\n  }, [getQRCode])\n\n  if (!wallet) {\n    return <div>Connect wallet to scan</div>\n  }\n\n  if (!tokenData) {\n    return <div>Token not found</div>\n  }\n\n  return qrCode ? (\n    <QRCodeOuter>\n      <img height=\"300px\" src={qrCode} alt=\"qr-code\" />\n      <div className=\"disclaimer\">\n        This is a rotating QR code containing a temporarily valid signed\n        transaction\n      </div>\n    </QRCodeOuter>\n  ) : (\n    <LoadingSpinner />\n  )\n}\n\nconst QRCodeOuter = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n\n  img {\n    border-radius: 30px;\n    padding: 10px;\n  }\n\n  .disclaimer {\n    color: white;\n    text-align: center;\n    position: absolute;\n    bottom: -40px;\n  }\n`\n\nexport default QRCode\n","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/StepDetail.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/TwitterIcon.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/common/icons.tsx",[],[],"/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/components/RentalCard.tsx",["363","364","365","366","367","368","369","370","371","372"],[],"import type { IssueParameters } from '@cardinal/token-manager'\nimport { claimLinks, issueToken } from '@cardinal/token-manager'\nimport {\n  InvalidationType,\n  TokenManagerKind,\n} from '@cardinal/token-manager/dist/cjs/programs/tokenManager'\nimport styled from '@emotion/styled'\nimport * as anchor from '@project-serum/anchor'\nimport type { Wallet } from '@saberhq/solana-contrib'\nimport type { Connection } from '@solana/web3.js'\nimport { Keypair, PublicKey } from '@solana/web3.js'\nimport { DatePicker, InputNumber, Select } from 'antd'\nimport type { TokenData } from 'api/api'\nimport type { EditionInfo } from 'api/editions'\nimport getEditionInfo from 'api/editions'\nimport { tryPublicKey } from 'api/utils'\nimport { NFTOverlay } from 'common/NFTOverlay'\nimport { notify } from 'common/Notification'\nimport { executeTransaction } from 'common/Transactions'\nimport { fmtMintAmount } from 'common/units'\nimport { getQueryParam, longDateString, shortPubKey } from 'common/utils'\nimport { usePaymentMints } from 'providers/PaymentMintsProvider'\nimport { getLink } from 'providers/ProjectConfigProvider'\nimport { useUserTokenData } from 'providers/TokenDataProvider'\nimport React, { useEffect, useState } from 'react'\nimport { BiQrScan, BiTimer } from 'react-icons/bi'\nimport { FaEye, FaLink } from 'react-icons/fa'\nimport { FiSend } from 'react-icons/fi'\nimport { GiRobotGrab } from 'react-icons/gi'\nimport { GrReturn } from 'react-icons/gr'\nimport { ImPriceTags } from 'react-icons/im'\nimport { Alert } from 'rental-components/common/Alert'\nimport { Button } from 'rental-components/common/Button'\nimport { ButtonWithFooter } from 'rental-components/common/ButtonWithFooter'\nimport { PAYMENT_MINTS } from 'rental-components/common/Constants'\nimport {\n  Fieldset,\n  Input,\n  InputBorder,\n} from 'rental-components/common/LabeledInput'\nimport { MintPriceSelector } from 'rental-components/common/MintPriceSelector'\nimport { PoweredByFooter } from 'rental-components/common/PoweredByFooter'\nimport { StepDetail } from 'rental-components/common/StepDetail'\n\nconst { Option } = Select\n\nconst NFTOuter = styled.div`\n  margin: 20px auto 0px auto;\n  height: 200px;\n  position: relative;\n  border-radius: 10px;\n\n  .media {\n    border-radius: 10px;\n    height: 100%;\n  }\n`\n\nconst handleCopy = (shareUrl: string) => {\n  navigator.clipboard.writeText(shareUrl)\n  notify({ message: 'Share link copied' })\n}\n\nfunction getEditionPill(editionInfo: EditionInfo) {\n  const masterEdition = editionInfo.masterEdition\n  const edition = editionInfo.edition\n\n  return (\n    <div className=\"ms-2 mx-auto flex justify-center\">\n      <span className=\"badge badge-pill bg-dark\">{`${\n        edition && masterEdition\n          ? `Edition ${edition.edition.toNumber()} / ${masterEdition.supply.toNumber()}`\n          : masterEdition\n          ? 'Master Edition'\n          : 'No Master Edition Information'\n      }`}</span>\n    </div>\n  )\n}\n\nconst formatError = (error: string) => {\n  if (error.includes('0x1780')) {\n    return 'This mint is not elligible for rent'\n  }\n  return error\n}\n\nexport type RentalCardConfig = {\n  invalidations?: {\n    showUsagesOption: boolean\n    showExpirationOption: boolean\n    showDurationOption: boolean\n    showManualOption: boolean\n  }\n  invalidationOptions?: {\n    durationCategories: string[]\n    invalidationCategories: string[]\n    paymentMints: string[]\n    setClaimRentalReceipt: true\n    showClaimRentalReceipt: boolean\n  }\n}\n\nexport type RentalCardProps = {\n  dev?: boolean\n  cluster?: string\n  connection: Connection\n  wallet: Wallet\n  tokenData: TokenData\n  appName?: string\n  appTwitter?: string\n  rentalCardConfig: RentalCardConfig\n  notify?: () => void\n  onComplete?: (asrg0: string) => void\n}\n\nexport const RentalCard = ({\n  appName,\n  appTwitter,\n  dev,\n  cluster,\n  connection,\n  wallet,\n  tokenData,\n  rentalCardConfig,\n  notify,\n  onComplete,\n}: RentalCardProps) => {\n  const [error, setError] = useState<string>()\n  const [loading, setLoading] = useState(false)\n  const [link, setLink] = useState<string | null>(null)\n  const { refreshTokenAccounts } = useUserTokenData()\n  const { tokenAccount, metaplexData, editionData, metadata, tokenManager } =\n    tokenData\n  const customImageUri = getQueryParam(metadata?.data?.image, 'uri')\n  const [invalidationType, setInvalidationType] = useState(\n    InvalidationType.Return\n  )\n\n  const [editionInfo, setEditionInfo] = useState<EditionInfo>({})\n  const getEdition = async () => {\n    try {\n      const editionInfo = await getEditionInfo(metaplexData, connection)\n      setEditionInfo(editionInfo)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n  useEffect(() => {\n    getEdition()\n  }, [metaplexData])\n\n  let durationData: { [key: string]: number } = {\n    Minutes: 60,\n    Hours: 3600,\n    Days: 86400,\n    Weeks: 604800,\n    Months: 2592000,\n    Years: 31104000,\n  }\n\n  let invalidationTypes = [\n    {\n      type: InvalidationType.Return,\n      label: 'Return',\n    },\n    {\n      type: InvalidationType.Invalidate,\n      label: 'Invalidate',\n    },\n    {\n      type: InvalidationType.Release,\n      label: 'Release',\n    },\n  ]\n\n  let paymentMintData = PAYMENT_MINTS\n\n  const defaultDurationCategory = Object.keys(durationData)[2]!\n  const { paymentMintInfos } = usePaymentMints()\n  const defaultPaymentMint = paymentMintData[0]!\n\n  // form\n  const [price, setPrice] = useState(0)\n  const [paymentMint, setPaymentMint] = useState<string>(\n    defaultPaymentMint.mint\n  )\n  const [expiration, setExpiration] = useState<number | null>(null)\n  const [durationAmount, setDurationAmount] = useState<number | null>(null)\n  const [durationCategory, setDurationCategory] = useState<string | undefined>(\n    defaultDurationCategory\n  )\n  const [extensionPaymentAmount, setExtensionPaymentAmount] = useState(0)\n  const [extensionPaymentMint, setExtensionPaymentMint] = useState(\n    defaultPaymentMint.mint\n  )\n  const [extensionDurationAmount, setExtensionDurationAmount] = useState<\n    number | null\n  >(null)\n  const [extensionDurationCategory, setExtensionDurationCategory] =\n    useState<string>(defaultDurationCategory)\n  const [extensionMaxExpiration, setExtensionMaxExpiration] = useState<\n    number | null\n  >(null)\n  const [disablePartialExtension, setDisablePartialExtension] = useState<\n    boolean | null\n  >(null)\n  const [totalUsages, setTotalUsages] = useState<number | null>(null)\n  const [visibility, setVisibiliy] = useState<'private' | 'public'>('public')\n  const [customInvalidator, setCustomInvalidator] = useState<\n    string | undefined\n  >(undefined)\n  const [claimRentalReceipt, setClaimRentalReceipt] = useState(false)\n\n  const [showAdditionalOptions, setShowAdditionalOptions] = useState(false)\n  const [showUsages, setShowUsages] = useState(false)\n  const [showExpiration, setShowExpiration] = useState(false)\n  const [showDuration, setShowDuration] = useState(false)\n  const [showExtendDuration, setShowExtendDuration] = useState(false)\n  const [showCustom, setShowCustom] = useState(false)\n\n  // Apply Rental Card settings from the project config\n  const {\n    showUsagesOption,\n    showExpirationOption,\n    showDurationOption,\n    showManualOption,\n  } = rentalCardConfig.invalidations || {}\n\n  let showClaimRentalReceipt = true\n  if (\n    rentalCardConfig.invalidationOptions?.setClaimRentalReceipt !== undefined\n  ) {\n    if (\n      claimRentalReceipt !==\n      rentalCardConfig.invalidationOptions?.setClaimRentalReceipt\n    ) {\n      setClaimRentalReceipt(\n        rentalCardConfig.invalidationOptions?.setClaimRentalReceipt\n      )\n    }\n    showClaimRentalReceipt = false\n  }\n\n  if (rentalCardConfig.invalidationOptions) {\n    if (rentalCardConfig.invalidationOptions.durationCategories) {\n      durationData = Object.keys(durationData)\n        .filter((key) =>\n          rentalCardConfig.invalidationOptions?.durationCategories?.includes(\n            key\n          )\n        )\n        .reduce((obj: { [key: string]: number }, key: string) => {\n          const d = durationData[key]\n          if (d) {\n            obj[key] = d\n          }\n          return obj\n        }, {})\n    }\n    if (rentalCardConfig.invalidationOptions.invalidationCategories) {\n      invalidationTypes = invalidationTypes.filter(({ label }) =>\n        rentalCardConfig.invalidationOptions?.invalidationCategories?.includes(\n          label\n        )\n      )\n    }\n    if (rentalCardConfig.invalidationOptions.paymentMints) {\n      paymentMintData = paymentMintData.filter(({ mint }) =>\n        rentalCardConfig.invalidationOptions?.paymentMints?.includes(mint)\n      )\n    }\n  }\n\n  const handleSelection = (value: string) => {\n    if (value === 'expiration') {\n      if (showDuration) {\n        setShowDuration(!showDuration)\n      }\n      setShowExpiration(!showExpiration)\n    } else if (value === 'duration') {\n      if (showExpiration) {\n        setShowExpiration(!showExpiration)\n      }\n      if (showDuration) {\n        setShowExtendDuration(false)\n      }\n      setShowDuration(!showDuration)\n    }\n    setShowCustom(false)\n    setExpiration(null)\n    setDurationAmount(null)\n    setDurationCategory(defaultDurationCategory)\n    nullExtensionProperties()\n  }\n\n  const nullExtensionProperties = () => {\n    setExtensionPaymentAmount(0)\n    setExtensionPaymentMint(defaultPaymentMint?.mint)\n    setExtensionDurationAmount(null)\n    setExtensionDurationCategory(defaultDurationCategory)\n    setExtensionMaxExpiration(null)\n  }\n\n  const hasAllExtensionProperties = (): boolean => {\n    return extensionPaymentAmount &&\n      extensionDurationAmount &&\n      extensionPaymentMint &&\n      extensionDurationCategory\n      ? true\n      : false\n  }\n\n  const handleRental = async () => {\n    const extensionPaymentMintPublicKey = tryPublicKey(extensionPaymentMint)\n    try {\n      if (!tokenAccount) {\n        throw 'Token acount not found'\n      }\n      if (showExtendDuration && !hasAllExtensionProperties()) {\n        throw 'Please fill out all extension time and price fields'\n      }\n      if (!extensionPaymentMintPublicKey) {\n        throw 'Invalid payment mint'\n      }\n\n      setLoading(true)\n      const rentalMint = new PublicKey(\n        tokenAccount?.account.data.parsed.info.mint\n      )\n\n      const receiptMintKeypair = Keypair.generate()\n      const issueParams: IssueParameters = {\n        claimPayment:\n          price && paymentMint\n            ? {\n                paymentAmount: price,\n                paymentMint: new PublicKey(paymentMint),\n              }\n            : undefined,\n        timeInvalidation:\n          expiration || (durationAmount && durationCategory)\n            ? {\n                expiration: expiration || undefined,\n                durationSeconds:\n                  durationAmount && durationCategory\n                    ? durationAmount * (durationData[durationCategory] || 0)\n                    : undefined,\n                extension: hasAllExtensionProperties()\n                  ? {\n                      extensionPaymentAmount: extensionPaymentAmount,\n                      extensionDurationSeconds:\n                        extensionDurationAmount! *\n                        (durationData[extensionDurationCategory || 'Minutes'] ||\n                          0),\n                      extensionPaymentMint: extensionPaymentMintPublicKey,\n                      maxExpiration: extensionMaxExpiration\n                        ? extensionMaxExpiration\n                        : undefined,\n                      disablePartialExtension: disablePartialExtension\n                        ? disablePartialExtension\n                        : undefined,\n                    }\n                  : undefined,\n              }\n            : undefined,\n        useInvalidation: totalUsages ? { totalUsages: totalUsages } : undefined,\n        mint: rentalMint,\n        issuerTokenAccountId: tokenAccount?.pubkey,\n        kind:\n          editionInfo.edition || editionInfo.masterEdition\n            ? TokenManagerKind.Edition\n            : TokenManagerKind.Managed,\n        invalidationType,\n        visibility,\n        customInvalidators: customInvalidator\n          ? [new PublicKey(customInvalidator)]\n          : undefined,\n        receiptOptions: claimRentalReceipt ? { receiptMintKeypair } : undefined,\n      }\n\n      const [transaction, tokenManagerId, otpKeypair] = await issueToken(\n        connection,\n        wallet,\n        issueParams\n      )\n      const signers = []\n      if (claimRentalReceipt) signers.push(receiptMintKeypair)\n      await executeTransaction(connection, wallet, transaction, {\n        silent: false,\n        callback: refreshTokenAccounts,\n        signers,\n      })\n      const link = claimLinks.getLink(\n        tokenManagerId,\n        otpKeypair,\n        cluster,\n        getLink('/claim', false)\n      )\n      setLink(link)\n      handleCopy(link)\n      console.log(link)\n    } catch (e) {\n      console.log('Error handling rental', e)\n      setError(`Error handling rental: ${formatError(`${e}`)}`)\n    } finally {\n      setLoading(false)\n    }\n  }\n  return (\n    <RentalCardOuter>\n      <Wrapper>\n        <Instruction>\n          {appName ? `${appName} uses` : 'Use'} Cardinal to rent out this NFT on{' '}\n          <strong>Solana</strong>.\n        </Instruction>\n        {(!wallet?.publicKey || !connection) && (\n          <Alert\n            style={{ marginBottom: '20px' }}\n            message={\n              <>\n                <div>Connect wallet to continue</div>\n              </>\n            }\n            type=\"warning\"\n            showIcon\n          />\n        )}\n        <ImageWrapper>\n          <NFTOuter>\n            <NFTOverlay\n              state={tokenManager?.parsed.state}\n              paymentAmount={price || undefined}\n              paymentMint={paymentMint || undefined}\n              expiration={expiration || undefined}\n              durationSeconds={\n                durationAmount && durationCategory\n                  ? durationAmount * (durationData[durationCategory] || 0)\n                  : undefined\n              }\n              usages={totalUsages ? 0 : undefined}\n              totalUsages={totalUsages || undefined}\n              extendable={hasAllExtensionProperties()}\n              returnable={invalidationType === InvalidationType.Return}\n              revocable={customInvalidator ? true : false}\n              lineHeight={12}\n            />\n            {metadata && metadata.data && (\n              // (metadata.data.animation_url ? (\n              //   // @ts-ignore\n              //   <video\n              //     className=\"media\"\n              //     auto-rotate-delay=\"0\"\n              //     auto-rotate=\"true\"\n              //     auto-play=\"true\"\n              //     src={metadata.data.animation_url}\n              //     // arStatus=\"not-presenting\"\n              //     // @ts-ignore\n              //   ></video>\n              // ) : (\n              <img\n                className=\"media\"\n                src={customImageUri || metadata.data.image}\n                alt={metadata.data.name}\n              />\n            )}\n          </NFTOuter>\n          {editionInfo && getEditionPill(editionInfo)}\n        </ImageWrapper>\n        <DetailsWrapper>\n          <div className=\"flex justify-center\">\n            {showUsagesOption ? (\n              <div\n                className=\"mr-4 flex cursor-pointer\"\n                onClick={() => {\n                  !showUsages ? setShowCustom(false) : null,\n                    setShowUsages(!showUsages)\n                }}\n              >\n                <input\n                  className=\"my-auto mr-1 cursor-pointer\"\n                  type=\"checkbox\"\n                  checked={showUsages}\n                />\n                <span className=\"\">Usages</span>\n              </div>\n            ) : null}\n            {showExpirationOption ? (\n              <div\n                className=\"mr-4 flex cursor-pointer\"\n                onClick={() => handleSelection('expiration')}\n              >\n                <input\n                  className=\"my-auto mr-1 cursor-pointer\"\n                  type=\"checkbox\"\n                  checked={showExpiration}\n                />\n                <span className=\"\">Expiration</span>\n              </div>\n            ) : null}\n            {showDurationOption ? (\n              <div\n                className=\"mr-4 flex cursor-pointer\"\n                onClick={() => handleSelection('duration')}\n              >\n                <input\n                  className=\"my-auto mr-1 cursor-pointer\"\n                  type=\"checkbox\"\n                  checked={showDuration}\n                />\n                <span className=\"\">Duration</span>\n              </div>\n            ) : null}\n            {showManualOption ? (\n              <div\n                className=\"mr-4 flex cursor-pointer\"\n                onClick={() => {\n                  setShowCustom(!showCustom)\n                  setShowDuration(false)\n                  setShowExpiration(false)\n                  setShowUsages(false)\n                }}\n              >\n                <input\n                  className=\"my-auto mr-1 cursor-pointer\"\n                  type=\"checkbox\"\n                  checked={showCustom}\n                />\n                <span className=\"\">Manual</span>\n              </div>\n            ) : null}\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            {!showCustom ? (\n              <StepDetail\n                icon={<ImPriceTags />}\n                title=\"Rental Price\"\n                description={\n                  <MintPriceSelector\n                    disabled={visibility === 'private'}\n                    price={price}\n                    mint={paymentMint}\n                    mintDisabled={paymentMintData.length === 1}\n                    handlePrice={setPrice}\n                    handleMint={setPaymentMint}\n                  />\n                }\n              />\n            ) : null}\n            {showCustom ? (\n              <StepDetail\n                icon={<GiRobotGrab />}\n                title=\"Manual Revocation Pubkey\"\n                description={\n                  <div className=\"flex\">\n                    <Fieldset>\n                      <InputBorder>\n                        <Input\n                          className=\"overflow-ellipsis\"\n                          name=\"tweet\"\n                          value={customInvalidator}\n                          placeholder={shortPubKey(wallet.publicKey)}\n                          onChange={(e) => setCustomInvalidator(e.target.value)}\n                        />\n                      </InputBorder>\n                    </Fieldset>\n                    <Button\n                      variant={'primary'}\n                      className=\"ml-2 mt-0.5 inline-block flex-none\"\n                      onClick={() =>\n                        setCustomInvalidator(wallet.publicKey.toString())\n                      }\n                    >\n                      {' '}\n                      Me{' '}\n                    </Button>\n                  </div>\n                }\n              />\n            ) : null}\n            {showUsages ? (\n              <StepDetail\n                icon={<BiQrScan />}\n                title=\"Uses\"\n                description={\n                  <Fieldset>\n                    <InputBorder>\n                      <Input\n                        name=\"tweet\"\n                        type=\"number\"\n                        onChange={(e) =>\n                          setTotalUsages(parseInt(e.target.value))\n                        }\n                      />\n                    </InputBorder>\n                  </Fieldset>\n                }\n              />\n            ) : null}\n            {showExpiration ? (\n              <StepDetail\n                icon={<BiTimer />}\n                title=\"Expiration\"\n                description={\n                  <div>\n                    <DatePicker\n                      style={{\n                        borderRadius: '4px',\n                        zIndex: 99999,\n                      }}\n                      showTime\n                      onChange={(e) =>\n                        setExpiration(e ? e.valueOf() / 1000 : null)\n                      }\n                    />\n                  </div>\n                }\n              />\n            ) : null}\n            {showDuration ? (\n              <StepDetail\n                icon={<BiTimer />}\n                title=\"Rental Duration\"\n                description={\n                  <div>\n                    <div className=\"flex gap-3 align-middle \">\n                      <InputNumber\n                        className=\"rounded-[4px]\"\n                        style={{ width: '100%' }}\n                        placeholder=\"# of...\"\n                        min=\"0\"\n                        step={1}\n                        onChange={(e) => setDurationAmount(parseInt(e))}\n                      />\n                      <Select\n                        className=\"w-max rounded-[4px]\"\n                        onChange={(e) => setDurationCategory(e)}\n                        defaultValue={defaultDurationCategory}\n                      >\n                        {Object.keys(durationData).map((category) => (\n                          <Option key={category} value={category}>\n                            {durationAmount && durationAmount === 1\n                              ? category.substring(0, category.length - 1)\n                              : category}\n                          </Option>\n                        ))}\n                      </Select>\n                    </div>\n                  </div>\n                }\n              />\n            ) : null}\n          </div>\n          <div>\n            {showDuration ? (\n              <button\n                className=\"mb-2 text-blue-500\"\n                onClick={() => setShowExtendDuration(!showExtendDuration)}\n              >\n                {showExtendDuration ? '[-]' : '[+]'} Extendability\n              </button>\n            ) : null}\n            <div className=\"grid grid-cols-2 gap-4\">\n              {showDuration && showExtendDuration ? (\n                <>\n                  <StepDetail\n                    icon={<ImPriceTags />}\n                    title=\"Extension Price\"\n                    description={\n                      <>\n                        <MintPriceSelector\n                          disabled={visibility === 'private'}\n                          price={extensionPaymentAmount}\n                          mint={extensionPaymentMint}\n                          mintDisabled={paymentMintData.length === 1}\n                          handlePrice={setExtensionPaymentAmount}\n                          handleMint={setExtensionPaymentMint}\n                        />\n                      </>\n                    }\n                  />\n                  <StepDetail\n                    icon={<BiTimer />}\n                    title=\"Extension Duration\"\n                    description={\n                      <div>\n                        <div className=\"flex gap-3 align-middle \">\n                          <InputNumber\n                            className=\"rounded-[4px]\"\n                            style={{ width: '100%' }}\n                            placeholder=\"# of...\"\n                            min=\"0\"\n                            step={1}\n                            onChange={(e) =>\n                              setExtensionDurationAmount(parseInt(e))\n                            }\n                          />\n                          <Select\n                            className=\"w-max rounded-[4px]\"\n                            onChange={(e) => setExtensionDurationCategory(e)}\n                            defaultValue={defaultDurationCategory}\n                          >\n                            {Object.keys(durationData).map((category) => (\n                              <Option key={category} value={category}>\n                                {durationAmount && durationAmount === 1\n                                  ? category.substring(0, category.length - 1)\n                                  : category}\n                              </Option>\n                            ))}\n                          </Select>\n                        </div>\n                      </div>\n                    }\n                  />\n                </>\n              ) : null}\n              {showDuration && showExtendDuration ? (\n                <StepDetail\n                  icon={<BiTimer />}\n                  title=\"Max Expiration\"\n                  description={\n                    <div>\n                      <DatePicker\n                        className=\"rounded-[4px]\"\n                        style={{\n                          zIndex: 99999,\n                        }}\n                        showTime\n                        onChange={(e) =>\n                          setExtensionMaxExpiration(\n                            e ? e.valueOf() / 1000 : null\n                          )\n                        }\n                      />\n                    </div>\n                  }\n                />\n              ) : null}\n              {showDuration && showExtendDuration ? (\n                <div className=\"mt-1\">\n                  <span\n                    className=\"cursor-pointer\"\n                    onClick={() =>\n                      setDisablePartialExtension(!disablePartialExtension)\n                    }\n                  >\n                    <input\n                      className=\"my-auto inline-block cursor-pointer\"\n                      type=\"checkbox\"\n                      checked={disablePartialExtension || false}\n                    />\n                    <p className=\"mb-1 ml-3 inline-block text-[14px] font-bold text-black\">\n                      Disable Partial Extension\n                    </p>\n                  </span>\n                  <p className=\"mb-2 ml-6 inline-block text-[12px] text-gray-700\">\n                    If selected, rental extensions must occur in multiples of\n                    the extension duration.\n                  </p>\n                </div>\n              ) : null}\n            </div>\n            <button\n              className=\"-mt-7 mb-2 text-blue-500\"\n              onClick={() => setShowAdditionalOptions(!showAdditionalOptions)}\n            >\n              {showAdditionalOptions ? '[-]' : '[+]'} Additional Options\n            </button>\n            {showAdditionalOptions ? (\n              <div className=\"grid grid-cols-2 gap-4\">\n                {invalidationTypes.length !== 1 ? (\n                  <StepDetail\n                    icon={<GrReturn />}\n                    title=\"Invalidation\"\n                    description={\n                      <Select\n                        disabled={invalidationTypes.length === 1}\n                        style={{ width: '100%' }}\n                        onChange={(e) => setInvalidationType(e)}\n                        defaultValue={invalidationType}\n                      >\n                        {invalidationTypes.map(({ label, type }) => (\n                          <Option key={type} value={type}>\n                            {label}\n                          </Option>\n                        ))}\n                      </Select>\n                    }\n                  />\n                ) : null}\n\n                <StepDetail\n                  icon={<FaEye />}\n                  title=\"Visibility\"\n                  description={\n                    <Select\n                      style={{ width: '100%' }}\n                      onChange={(e) => {\n                        setVisibiliy(e)\n                        if (e === 'private') setPrice(0)\n                      }}\n                      defaultValue={visibility}\n                    >\n                      {[\n                        {\n                          type: 'public',\n                          label: 'Public',\n                        },\n                        {\n                          type: 'private',\n                          label: 'Private',\n                        },\n                      ].map(({ label, type }) => (\n                        <Option key={type} value={type}>\n                          {label}\n                        </Option>\n                      ))}\n                    </Select>\n                  }\n                />\n\n                {showClaimRentalReceipt ? (\n                  <div className=\"mt-1\">\n                    <span\n                      className=\"cursor-pointer\"\n                      onClick={() => setClaimRentalReceipt(!claimRentalReceipt)}\n                    >\n                      <input\n                        className=\"my-auto inline-block cursor-pointer\"\n                        type=\"checkbox\"\n                        checked={claimRentalReceipt}\n                      />\n                      <p className=\"mb-1 ml-3 inline-block text-[14px] font-bold text-black\">\n                        Claim Rental Receipt\n                      </p>\n                    </span>\n                    <p className=\"mb-2 ml-6 inline-block text-[12px] text-gray-700\">\n                      If selected, a receipt mint will be generated for the\n                      rental. The owner of the receipt mint will act as the\n                      issuer.\n                    </p>\n                  </div>\n                ) : null}\n              </div>\n            ) : null}\n          </div>\n        </DetailsWrapper>\n        <ButtonWithFooter\n          loading={loading}\n          complete={false}\n          message={\n            link ? (\n              <StyledAlert>\n                <Alert\n                  style={{\n                    height: 'auto',\n                    cursor: 'pointer',\n                  }}\n                  message={\n                    <>\n                      <div>\n                        Link created {link.substring(0, 20)}\n                        ...\n                        {link.substring(link.length - 5)}\n                        <div>\n                          This link can only be used once and cannot be\n                          regenerated\n                        </div>\n                      </div>\n                    </>\n                  }\n                  type=\"success\"\n                  showIcon\n                />\n              </StyledAlert>\n            ) : error ? (\n              <StyledAlert>\n                <Alert\n                  style={{ height: 'auto' }}\n                  message={\n                    <>\n                      <div>{error}</div>\n                    </>\n                  }\n                  type=\"error\"\n                  showIcon\n                />\n              </StyledAlert>\n            ) : (\n              <StyledAlert>\n                <Alert\n                  style={{ height: 'auto' }}\n                  message={\n                    <>\n                      <div>\n                        Whoever claims this rental will own the asset{' '}\n                        {totalUsages && expiration\n                          ? `for either ${totalUsages} uses or until ${longDateString(\n                              expiration\n                            )} and then it will be ${\n                              invalidationType === InvalidationType.Return\n                                ? 'securely returned to you.'\n                                : invalidationType === InvalidationType.Release\n                                ? 'released to whoever claims it.'\n                                : 'invalid forever..'\n                            }`\n                          : totalUsages\n                          ? `for ${totalUsages} uses and then it will be ${\n                              invalidationType === InvalidationType.Return\n                                ? 'securely returned to you.'\n                                : invalidationType === InvalidationType.Release\n                                ? 'released to whoever claims it.'\n                                : 'invalid forever'\n                            }`\n                          : expiration\n                          ? `until ${longDateString(\n                              expiration\n                            )} and then it will be ${\n                              invalidationType === InvalidationType.Return\n                                ? 'securely returned to you.'\n                                : invalidationType === InvalidationType.Release\n                                ? 'released to whoever claims it.'\n                                : 'invalid forever.'\n                            }`\n                          : durationAmount && durationCategory\n                          ? `\n                            for ${durationAmount} ${\n                              durationAmount !== 1\n                                ? durationCategory.toLocaleLowerCase()\n                                : durationCategory\n                                    .toLocaleLowerCase()\n                                    .substring(0, durationCategory.length - 1)\n                            } and then it will be ${\n                              invalidationType === InvalidationType.Return\n                                ? 'securely returned to you.'\n                                : invalidationType === InvalidationType.Release\n                                ? 'released to whoever claims it.'\n                                : 'invalid forever.'\n                            }`\n                          : 'forever.'}\n                        {showExtendDuration &&\n                        extensionPaymentAmount &&\n                        extensionDurationAmount &&\n                        extensionPaymentMint\n                          ? ` The claimer can choose to extend the rental at the rate of ${fmtMintAmount(\n                              paymentMintInfos[extensionPaymentMint.toString()],\n                              new anchor.BN(extensionPaymentAmount)\n                            )} ${\n                              paymentMintData.find(\n                                (obj) => obj.mint === extensionPaymentMint\n                              )?.symbol\n                            } / ${extensionDurationAmount} ${\n                              extensionDurationAmount === 1\n                                ? extensionDurationCategory\n                                    ?.toLowerCase()\n                                    .substring(\n                                      0,\n                                      extensionDurationCategory.length - 1\n                                    )\n                                : extensionDurationCategory?.toLowerCase()\n                            }${\n                              extensionMaxExpiration\n                                ? ` up until ${new Date(\n                                    extensionMaxExpiration * 1000\n                                  ).toLocaleString('en-US')}.`\n                                : '.'\n                            } `\n                          : null}\n                      </div>\n                    </>\n                  }\n                  type=\"info\"\n                  showIcon\n                />\n              </StyledAlert>\n            )\n          }\n          onClick={link ? () => handleCopy(link) : handleRental}\n          footer={<PoweredByFooter />}\n        >\n          {link ? (\n            <div\n              style={{ gap: '5px', fontWeight: '300' }}\n              className=\"flex items-center justify-center\"\n            >\n              <FaLink />\n              {link.substring(0, 40)}\n              ...\n              {link.substring(link.length - 10)}\n            </div>\n          ) : (\n            <div\n              style={{ gap: '5px' }}\n              className=\"flex items-center justify-center\"\n            >\n              Send {visibility} link\n              <FiSend />\n            </div>\n          )}\n        </ButtonWithFooter>\n      </Wrapper>\n    </RentalCardOuter>\n  )\n}\n\nconst BigIcon = styled.div<{ selected: boolean }>`\n  font-size: 50px;\n  background-color: ${({ selected }) => (selected ? 'black' : '#888')};\n  color: white;\n  padding: 10px;\n  cursor: pointer;\n  transition: transform 0.2s;\n  height: 50px;\n  width: 50px;\n  display: flex;\n  margin: 20px auto 0px auto;\n  border-radius: 50%;\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`\n\nconst StyledAlert = styled.div`\n  width: 100%;\n`\n\nconst Wrapper = styled.div`\n  padding: 10px 28px 28px 28px;\n`\n\nconst Instruction = styled.h2`\n  margin-top: 0px;\n  font-weight: normal;\n  font-size: 24px;\n  line-height: 30px;\n  text-align: center;\n  letter-spacing: -0.02em;\n  color: #000000;\n`\n\nconst DetailsWrapper = styled.div`\n  display: grid;\n  grid-row-gap: 28px;\n`\n\nconst ImageWrapper = styled.div`\n  display: grid;\n  grid-row-gap: 10px;\n  margin-bottom: 20px;\n`\n\nexport const RentalCardOuter = styled.div``\n","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/components/RentalExtensionCard.tsx",["373","374","375","376","377","378","379","380","381","382"],[],"import { withExtendExpiration } from '@cardinal/token-manager'\nimport { withWrapSol } from '@cardinal/token-manager/dist/cjs/wrappedSol'\nimport styled from '@emotion/styled'\nimport * as anchor from '@project-serum/anchor'\nimport type { Wallet } from '@saberhq/solana-contrib'\nimport type * as splToken from '@solana/spl-token'\nimport type { Connection } from '@solana/web3.js'\nimport { Transaction } from '@solana/web3.js'\nimport type { TokenData } from 'api/api'\nimport type { EditionInfo } from 'api/editions'\nimport getEditionInfo from 'api/editions'\nimport { getATokenAccountInfo } from 'api/utils'\nimport { TokenDataOverlay } from 'common/NFTOverlay'\nimport { notify } from 'common/Notification'\nimport { executeTransaction } from 'common/Transactions'\nimport { fmtMintAmount } from 'common/units'\nimport { getQueryParam } from 'common/utils'\nimport {\n  usePaymentMints,\n  WRAPPED_SOL_MINT,\n} from 'providers/PaymentMintsProvider'\nimport { useUserTokenData } from 'providers/TokenDataProvider'\nimport React, { useEffect, useState } from 'react'\nimport { FiSend } from 'react-icons/fi'\nimport { ImPriceTags } from 'react-icons/im'\nimport { Alert } from 'rental-components/common/Alert'\nimport { ButtonWithFooter } from 'rental-components/common/ButtonWithFooter'\nimport { PAYMENT_MINTS } from 'rental-components/common/Constants'\nimport { MintPriceSelector } from 'rental-components/common/MintPriceSelector'\nimport { PoweredByFooter } from 'rental-components/common/PoweredByFooter'\nimport { StepDetail } from 'rental-components/common/StepDetail'\n\nconst NFTOuter = styled.div`\n  margin: 20px auto 0px auto;\n  height: 200px;\n  position: relative;\n  border-radius: 10px;\n\n  .media {\n    border-radius: 10px;\n    height: 100%;\n  }\n`\n\nconst handleCopy = (shareUrl: string) => {\n  navigator.clipboard.writeText(shareUrl)\n  notify({ message: 'Share link copied' })\n}\n\nfunction getEditionPill(editionInfo: EditionInfo) {\n  const masterEdition = editionInfo.masterEdition\n  const edition = editionInfo.edition\n\n  return (\n    <div className=\"ms-2 mx-auto flex justify-center\">\n      <span className=\"badge badge-pill bg-dark\">{`${\n        edition && masterEdition\n          ? `Edition ${edition.edition.toNumber()} / ${masterEdition.supply.toNumber()}`\n          : masterEdition\n          ? 'Master Edition'\n          : 'No Master Edition Information'\n      }`}</span>\n    </div>\n  )\n}\n\nconst formatError = (error: string) => {\n  if (error.includes('0x1780')) {\n    return 'This mint is not elligible for rent'\n  }\n  return error\n}\n\nexport type RentalCardProps = {\n  dev?: boolean\n  cluster?: string\n  connection: Connection\n  wallet: Wallet\n  tokenData: TokenData\n  appName?: string\n  appTwitter?: string\n  notify?: () => void\n  onComplete?: (asrg0: string) => void\n}\n\nexport const RentalExtensionCard = ({\n  appName,\n  appTwitter,\n  dev,\n  cluster,\n  connection,\n  wallet,\n  tokenData,\n  notify,\n  onComplete,\n}: RentalCardProps) => {\n  const [error, setError] = useState<string>()\n  const [loading, setLoading] = useState(false)\n  const [link, setLink] = useState<string | null>(null)\n  const { refreshTokenAccounts } = useUserTokenData()\n  const { tokenAccount, metaplexData, metadata, tokenManager } = tokenData\n  const customImageUri = getQueryParam(metadata?.data?.image, 'uri')\n  const [userPaymentTokenAccount, setUserPaymentTokenAccount] =\n    useState<splToken.AccountInfo | null>(null)\n  const [paymentTokenAccountError, setPaymentTokenAccountError] = useState<\n    boolean | null\n  >(null)\n  const [editionInfo, setEditionInfo] = useState<EditionInfo>({})\n  const [extensionSuccess, setExtensionSuccess] = useState(false)\n\n  const getEdition = async () => {\n    try {\n      const editionInfo = await getEditionInfo(metaplexData, connection)\n      setEditionInfo(editionInfo)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n  useEffect(() => {\n    getEdition()\n  }, [metaplexData])\n\n  const { paymentMintInfos } = usePaymentMints()\n\n  // form\n  const {\n    extensionPaymentAmount,\n    extensionPaymentMint,\n    durationSeconds,\n    extensionDurationSeconds,\n    maxExpiration,\n  } = tokenData.timeInvalidator?.parsed || {}\n\n  const [paymentAmount, setPaymentAmount] = useState<number>(0)\n  const [currentExtensionSeconds, setCurrentExtensionSeconds] = useState<\n    number | undefined | null\n  >(0)\n\n  useEffect(() => {\n    getUserPaymentTokenAccount()\n  }, [connection, wallet, tokenData, getUserPaymentTokenAccount])\n\n  const handleExtensionRental = async () => {\n    try {\n      setError('')\n      setExtensionSuccess(false)\n      if (!tokenAccount) throw 'Token acount not found'\n      if (!tokenData.tokenManager) throw 'Token manager not found'\n\n      setLoading(true)\n      const transaction = new Transaction()\n      if (extensionPaymentMint?.toString() === WRAPPED_SOL_MINT.toString()) {\n        const amountToWrap =\n          paymentAmount - (userPaymentTokenAccount?.amount.toNumber() || 0)\n        if (amountToWrap > 0) {\n          await withWrapSol(transaction, connection, wallet, amountToWrap)\n        }\n      }\n\n      await withExtendExpiration(\n        transaction,\n        connection,\n        wallet,\n        tokenData.tokenManager?.pubkey,\n        paymentAmount\n      )\n\n      await executeTransaction(connection, wallet, transaction, {\n        silent: false,\n        callback: refreshTokenAccounts,\n      })\n      setExtensionSuccess(true)\n    } catch (e) {\n      setExtensionSuccess(false)\n      console.log('Error handling extension rental', e)\n      setError(`Error handling extension rental: ${formatError(`${e}`)}`)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const secondsToString = (requiredSeconds: number | undefined | null) => {\n    if (!requiredSeconds || requiredSeconds === 0) return '0'\n    const days = Math.floor(requiredSeconds / 60 / 60 / 24)\n    const hours = Math.floor((requiredSeconds / 60 / 60) % 24)\n    const minutes = Math.floor((requiredSeconds / 60) % 60)\n    const seconds = Math.round(requiredSeconds % 60)\n\n    return `${days ? `${days}d ` : ''}${hours ? `${hours}h ` : ''}${\n      minutes ? `${minutes}m ` : ''\n    }${seconds ? `${seconds}s` : ''}`\n  }\n\n  const handlePaymentAmountChange = (value: number) => {\n    setPaymentAmount(value)\n    const extensionSeconds = paymentAmountToSeconds(value)\n    setCurrentExtensionSeconds(extensionSeconds)\n  }\n\n  const paymentAmountToSeconds = (paymentAmount: number) => {\n    return (\n      extensionDurationSeconds &&\n      extensionPaymentAmount &&\n      (extensionDurationSeconds.toNumber() /\n        extensionPaymentAmount.toNumber()) *\n        paymentAmount\n    )\n  }\n\n  if (!extensionPaymentAmount || !extensionPaymentMint || !durationSeconds) {\n    return <>Incorrect extension parameters</>\n  }\n\n  const loadRate = () => {\n    return `${fmtMintAmount(\n      paymentMintInfos[extensionPaymentMint.toString()],\n      new anchor.BN(extensionPaymentAmount)\n    )}\n    ${\n      PAYMENT_MINTS.find((obj) => obj.mint === extensionPaymentMint.toString())\n        ?.symbol\n    }\n    / ${secondsToString(extensionDurationSeconds?.toNumber())}`\n  }\n\n  const exceedMaxExpiration = () => {\n    return (\n      tokenData.tokenManager &&\n      currentExtensionSeconds &&\n      maxExpiration &&\n      maxExpiration.toNumber() <\n        tokenData.tokenManager.parsed.stateChangedAt.toNumber() +\n          durationSeconds.toNumber() +\n          currentExtensionSeconds\n    )\n  }\n\n  async function getUserPaymentTokenAccount() {\n    if (\n      wallet.publicKey &&\n      tokenData?.timeInvalidator?.parsed.extensionPaymentMint\n    ) {\n      try {\n        const userPaymentTokenAccountData = await getATokenAccountInfo(\n          connection,\n          tokenData?.timeInvalidator?.parsed.extensionPaymentMint,\n          wallet.publicKey\n        )\n        setUserPaymentTokenAccount(userPaymentTokenAccountData)\n      } catch (e) {\n        console.log(e)\n        if (\n          tokenData?.timeInvalidator?.parsed.extensionPaymentMint.toString() !==\n          WRAPPED_SOL_MINT\n        ) {\n          setPaymentTokenAccountError(true)\n        }\n      }\n    }\n  }\n\n  return (\n    <RentalCardOuter>\n      <Wrapper>\n        <Instruction>\n          {appName ? `${appName} uses` : 'Use'} Cardinal to rent out this NFT on{' '}\n          <strong>Solana</strong>.\n        </Instruction>\n        {(!wallet?.publicKey || !connection) && (\n          <Alert\n            style={{ marginBottom: '20px' }}\n            message={\n              <>\n                <div>Connect wallet to continue</div>\n              </>\n            }\n            type=\"warning\"\n            showIcon\n          />\n        )}\n        <ImageWrapper>\n          <NFTOuter>\n            <TokenDataOverlay tokenData={tokenData} lineHeight={12} />\n            {metadata && metadata.data && (\n              // (metadata.data.animation_url ? (\n              //   // @ts-ignore\n              //   <video\n              //     className=\"media\"\n              //     auto-rotate-delay=\"0\"\n              //     auto-rotate=\"true\"\n              //     auto-play=\"true\"\n              //     src={metadata.data.animation_url}\n              //     // arStatus=\"not-presenting\"\n              //     // @ts-ignore\n              //   ></video>\n              // ) : (\n              <img\n                className=\"media\"\n                src={customImageUri || metadata.data.image}\n                alt={metadata.data.name}\n              />\n            )}\n          </NFTOuter>\n          {editionInfo && getEditionPill(editionInfo)}\n        </ImageWrapper>\n\n        <DetailsWrapper>\n          <div className=\"mx-auto\">\n            <StepDetail\n              icon={<ImPriceTags />}\n              title={`Extension Price (${loadRate()})\n              `}\n              description={\n                <MintPriceSelector\n                  price={paymentAmount}\n                  handlePrice={handlePaymentAmountChange}\n                  mint={extensionPaymentMint?.toString()}\n                  handleMint={() => {}}\n                  mintDisabled={true}\n                />\n              }\n            />\n          </div>\n\n          <div className=\"mx-auto -mt-3 w-1/2\">\n            <p className=\"ml-3 mt-2 text-[14px] text-gray-800\">\n              <span className=\"font-bold\">Extension Amount: </span>\n              {`${secondsToString(currentExtensionSeconds)}\n              `}\n            </p>\n            <p className=\"ml-3 mt-2 text-[12px] text-gray-800\">\n              <span className=\"font-bold \">Max Expiration: </span>\n              {maxExpiration\n                ? `${new Date(maxExpiration?.toNumber() * 1000).toLocaleString(\n                    'en-US'\n                  )}\n              `\n                : 'N/A'}\n            </p>\n          </div>\n        </DetailsWrapper>\n\n        {exceedMaxExpiration() ? (\n          <div className=\"mt-3\">\n            <StyledAlert>\n              <Alert\n                style={{ height: 'auto' }}\n                message={\n                  <>\n                    <div>{'Extension amount exceeds max expiration'}</div>\n                  </>\n                }\n                type=\"error\"\n                showIcon\n              />\n            </StyledAlert>\n          </div>\n        ) : null}\n\n        <ButtonWithFooter\n          loading={loading}\n          complete={false}\n          disabled={exceedMaxExpiration() || paymentAmount === 0}\n          message={\n            !exceedMaxExpiration() ? (\n              extensionSuccess && !error ? (\n                <StyledAlert>\n                  <Alert\n                    style={{\n                      height: 'auto',\n                      cursor: 'pointer',\n                    }}\n                    message={\n                      <>\n                        <div>Duration successfully added to rental.</div>\n                      </>\n                    }\n                    type=\"success\"\n                    showIcon\n                  />\n                </StyledAlert>\n              ) : error ? (\n                <StyledAlert>\n                  <Alert\n                    style={{ height: 'auto' }}\n                    message={\n                      <>\n                        <div>{error}</div>\n                      </>\n                    }\n                    type=\"error\"\n                    showIcon\n                  />\n                </StyledAlert>\n              ) : (\n                <StyledAlert>\n                  <Alert\n                    style={{ height: 'auto' }}\n                    message={\n                      <>\n                        {paymentAmount !== 0\n                          ? `Pay ${fmtMintAmount(\n                              paymentMintInfos[extensionPaymentMint.toString()],\n                              new anchor.BN(paymentAmount)\n                            )}\n                      ${\n                        PAYMENT_MINTS.find(\n                          (obj) => obj.mint === extensionPaymentMint.toString()\n                        )?.symbol\n                      } to extend the duration of your rental by ${secondsToString(\n                              paymentAmountToSeconds(paymentAmount)\n                            )}`\n                          : `Enter a payment amount to extend the duration of your rental.`}\n                      </>\n                    }\n                    type=\"info\"\n                    showIcon\n                  />\n                </StyledAlert>\n              )\n            ) : null\n          }\n          onClick={link ? () => handleCopy(link) : handleExtensionRental}\n          footer={<PoweredByFooter />}\n        >\n          <div\n            style={{ gap: '5px' }}\n            className=\"flex items-center justify-center\"\n          >\n            Extend Rental\n            <FiSend />\n          </div>\n        </ButtonWithFooter>\n      </Wrapper>\n    </RentalCardOuter>\n  )\n}\n\nconst StyledAlert = styled.div`\n  width: 100%;\n`\n\nconst Wrapper = styled.div`\n  padding: 10px 28px 28px 28px;\n`\n\nconst Instruction = styled.h2`\n  margin-top: 0px;\n  font-weight: normal;\n  font-size: 24px;\n  line-height: 30px;\n  text-align: center;\n  letter-spacing: -0.02em;\n  color: #000000;\n`\n\nconst DetailsWrapper = styled.div`\n  display: grid;\n  grid-row-gap: 28px;\n`\n\nconst ImageWrapper = styled.div`\n  display: grid;\n  grid-row-gap: 10px;\n  margin-bottom: 20px;\n`\n\nexport const RentalCardOuter = styled.div``\n","/Users/jbogle/Code/cardinal-token-manager-ui/rental-components/modal/index.tsx",[],["383","384"],"/Users/jbogle/Code/cardinal-token-manager-ui/stories/RentalCard.stories.tsx",["385"],[],"import 'antd/dist/antd.css'\nimport '../styles/globals.css'\n\nimport { BN } from '@project-serum/anchor'\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js'\nimport type { ComponentMeta,ComponentStory } from '@storybook/react'\nimport React from 'react'\n\nimport { RentalCard } from '../rental-components/components/RentalCard'\n\nconst connection = new Connection('https://api.devnet.solana.com')\n\n// More on default export: https://storybook.js.org/docs/react/writing-stories/introduction#default-export\nexport default {\n  title: 'Rentals/RentalCard',\n  component: RentalCard,\n  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n    connection: {\n      options: ['Dev', 'Main'],\n      mapping: {\n        Dev: new Connection('https://api.devnet.solana.com'),\n        Main: new Connection('https://api.mainnet-beta.solana.com'),\n      },\n    },\n  },\n} as ComponentMeta<typeof RentalCard>\n\n// More on component templates: https://storybook.js.org/docs/react/writing-stories/introduction#using-args\nconst Template: ComponentStory<typeof RentalCard> = (args) => (\n  <RentalCard {...args} />\n)\n\nexport const Primary = Template.bind({})\n// More on args: https://storybook.js.org/docs/react/writing-stories/args\nPrimary.args = {\n  connection: new Connection('https://api.devnet.solana.com'),\n  wallet: {\n    publicKey: new PublicKey('3c5mtZ9PpGu3hj1W1a13Hie1CAXKnRyj2xruNxwWcWTz'),\n    signTransaction: async () => new Transaction(),\n    signAllTransactions: async () => [new Transaction()],\n  },\n  tokenData: {\n    tokenAccount: {\n      account: {\n        data: {\n          parsed: {\n            info: {\n              delegate: 'FHT7qWkuZLZms8dKGvwb6MFaNdGC1j9uXMqqD9eMvq2j',\n              delegatedAmount: {\n                amount: '1',\n                decimals: 0,\n                uiAmount: 1,\n                uiAmountString: '1',\n              },\n              isNative: false,\n              mint: '81YfQDbo17N77bt4JRokLVvGUJBVRRWDpRKWTcxF6XCN',\n              owner: '3c5mtZ9PpGu3hj1W1a13Hie1CAXKnRyj2xruNxwWcWTz',\n              state: 'initialized',\n              tokenAmount: {\n                amount: '1',\n                decimals: 0,\n                uiAmount: 1,\n                uiAmountString: '1',\n              },\n            },\n            type: 'account',\n          },\n          program: 'spl-token',\n          space: 165,\n        },\n        executable: false,\n        lamports: 2039280,\n        owner: new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),\n        rentEpoch: 280,\n      },\n      pubkey: new PublicKey('2k7SNizKzqPUvkiq1ZbC7bxqu8mcVBMnxCbsAn7RtWFc'),\n    },\n    metaplexData: {\n      pubkey: new PublicKey('3QRRWdddUvHDL6rxub1qw8AKyJ512HpHB2BUGyi2z1kK'),\n      data: {\n        key: 4,\n        updateAuthority: '82UgoX3dGwPLSeEEM4wxZxqNWu1f4cp5qAi48FPaqACX',\n        mint: '81YfQDbo17N77bt4JRokLVvGUJBVRRWDpRKWTcxF6XCN',\n        data: {\n          name: 'Portals',\n          symbol: 'PRTL',\n          uri: 'https://arweave.net/RewRYM3lf-1Ry1hitgsiXuqsuERSujlTAChgl9S483c',\n          sellerFeeBasisPoints: 10,\n          creators: [],\n        },\n        primarySaleHappened: false,\n        isMutable: true,\n        editionNonce: 255,\n        tokenStandard: 0,\n        collection: null,\n        uses: null,\n      },\n    },\n    editionData: {\n      pubkey: new PublicKey('5rYEz8UEtmsCs3wVR6odh8v6wbK2XWrKDeY9jGu7v78P'),\n      data: {\n        key: 6,\n        supply: new BN('00'),\n        maxSupply: new BN('01'),\n      },\n    },\n    metadata: {\n      pubkey: new PublicKey('3QRRWdddUvHDL6rxub1qw8AKyJ512HpHB2BUGyi2z1kK'),\n      data: {\n        name: 'Portals | Onyx #104',\n        symbol: 'PRTL',\n        description:\n          'This expansive space strikes the perfect balance of splendor and functionality.',\n        seller_fee_basis_points: 500,\n        image:\n          'https://arweave.net/Kpi85acYI9i9HZVnnhRuO3Vi_1XDpshHx80eGA3mhD4?ext=jpg',\n        animation_url:\n          'https://arweave.net/SuRJK0fVU2Mg1L0qIJggeNQsWhHz7HUOboS9-gGhPAg?ext=mp4',\n        attributes: [\n          {\n            trait_type: 'Unit Type',\n            value: 'Onyx',\n          },\n          {\n            trait_type: 'Unit Number',\n            value: 104,\n          },\n        ],\n        collection: {\n          name: 'Portals',\n          family: 'Portals',\n        },\n        properties: {\n          files: [\n            {\n              uri: 'https://arweave.net/Kpi85acYI9i9HZVnnhRuO3Vi_1XDpshHx80eGA3mhD4?ext=jpg',\n              type: 'image/jpeg',\n            },\n            {\n              uri: 'https://arweave.net/SuRJK0fVU2Mg1L0qIJggeNQsWhHz7HUOboS9-gGhPAg?ext=mp4',\n              type: 'video/mp4',\n            },\n          ],\n          category: 'video',\n          creators: [\n            {\n              address: 'EmdsWm9dJ1d6BgQzHDcMJkDvB5SVvpfrAtpiGMVW1gxx',\n              share: 0,\n            },\n            {\n              address: 'GdtkQajEADGbfSUEBS5zctYrhemXYQkqnrMiGY7n7vAw',\n              share: 100,\n            },\n          ],\n        },\n      },\n    },\n  },\n}\n",{"ruleId":"386","severity":1,"message":"387","line":59,"column":14,"nodeType":"388","messageId":"389","endLine":59,"endColumn":17,"suggestions":"390"},{"ruleId":"391","severity":1,"message":"392","line":174,"column":17,"nodeType":"393","messageId":"394","endLine":174,"endColumn":35},{"ruleId":"391","severity":1,"message":"392","line":201,"column":19,"nodeType":"393","messageId":"394","endLine":201,"endColumn":37},{"ruleId":"391","severity":1,"message":"392","line":380,"column":17,"nodeType":"393","messageId":"394","endLine":380,"endColumn":35},{"ruleId":"386","severity":1,"message":"387","line":504,"column":17,"nodeType":"388","messageId":"389","endLine":504,"endColumn":20,"suggestions":"395"},{"ruleId":"391","severity":1,"message":"392","line":70,"column":36,"nodeType":"393","messageId":"394","endLine":70,"endColumn":61},{"ruleId":"391","severity":1,"message":"392","line":6,"column":22,"nodeType":"393","messageId":"394","endLine":6,"endColumn":45},{"ruleId":"391","severity":1,"message":"392","line":7,"column":26,"nodeType":"393","messageId":"394","endLine":7,"endColumn":53},{"ruleId":"391","severity":1,"message":"392","line":8,"column":16,"nodeType":"393","messageId":"394","endLine":8,"endColumn":33},{"ruleId":"396","severity":2,"message":"397","line":85,"column":37,"nodeType":"398","messageId":"399","endLine":85,"endColumn":45,"suppressions":"400"},{"ruleId":"401","severity":1,"message":"402","line":109,"column":6,"nodeType":"403","endLine":109,"endColumn":20,"suggestions":"404"},{"ruleId":"386","severity":1,"message":"387","line":203,"column":17,"nodeType":"388","messageId":"389","endLine":203,"endColumn":20,"suggestions":"405"},{"ruleId":"391","severity":1,"message":"392","line":223,"column":9,"nodeType":"393","messageId":"394","endLine":225,"endColumn":11},{"ruleId":"391","severity":1,"message":"392","line":293,"column":42,"nodeType":"393","messageId":"394","endLine":293,"endColumn":66},{"ruleId":"391","severity":1,"message":"392","line":289,"column":55,"nodeType":"393","messageId":"394","endLine":289,"endColumn":70},{"ruleId":"386","severity":1,"message":"387","line":307,"column":17,"nodeType":"388","messageId":"389","endLine":307,"endColumn":20,"suggestions":"406"},{"ruleId":"401","severity":1,"message":"407","line":338,"column":6,"nodeType":"403","endLine":338,"endColumn":37,"suggestions":"408"},{"ruleId":"401","severity":1,"message":"409","line":342,"column":6,"nodeType":"403","endLine":342,"endColumn":30,"suggestions":"410"},{"ruleId":"391","severity":1,"message":"392","line":419,"column":9,"nodeType":"393","messageId":"394","endLine":419,"endColumn":24},{"ruleId":"386","severity":1,"message":"387","line":431,"column":17,"nodeType":"388","messageId":"389","endLine":431,"endColumn":20,"suggestions":"411"},{"ruleId":"386","severity":1,"message":"387","line":37,"column":10,"nodeType":"388","messageId":"389","endLine":37,"endColumn":13,"suggestions":"412"},{"ruleId":"401","severity":1,"message":"413","line":180,"column":6,"nodeType":"403","endLine":180,"endColumn":20,"suggestions":"414"},{"ruleId":"386","severity":1,"message":"387","line":200,"column":21,"nodeType":"388","messageId":"389","endLine":200,"endColumn":24,"suggestions":"415"},{"ruleId":"391","severity":1,"message":"392","line":52,"column":25,"nodeType":"393","messageId":"394","endLine":52,"endColumn":41},{"ruleId":"391","severity":1,"message":"392","line":57,"column":40,"nodeType":"393","messageId":"394","endLine":57,"endColumn":56},{"ruleId":"386","severity":1,"message":"387","line":5,"column":42,"nodeType":"388","messageId":"389","endLine":5,"endColumn":45,"suggestions":"416"},{"ruleId":"386","severity":1,"message":"387","line":5,"column":76,"nodeType":"388","messageId":"389","endLine":5,"endColumn":79,"suggestions":"417"},{"ruleId":"401","severity":1,"message":"418","line":60,"column":6,"nodeType":"403","endLine":60,"endColumn":63,"suggestions":"419"},{"ruleId":"401","severity":1,"message":"420","line":64,"column":6,"nodeType":"403","endLine":64,"endColumn":64,"suggestions":"421"},{"ruleId":"391","severity":1,"message":"392","line":54,"column":30,"nodeType":"393","messageId":"394","endLine":54,"endColumn":47,"suggestions":"422"},{"ruleId":"391","severity":1,"message":"392","line":60,"column":28,"nodeType":"393","messageId":"394","endLine":60,"endColumn":45,"suggestions":"423"},{"ruleId":"386","severity":1,"message":"387","line":61,"column":19,"nodeType":"388","messageId":"389","endLine":61,"endColumn":22,"suggestions":"424"},{"ruleId":"401","severity":1,"message":"425","line":71,"column":6,"nodeType":"403","endLine":71,"endColumn":22,"suggestions":"426"},{"ruleId":"391","severity":1,"message":"392","line":49,"column":13,"nodeType":"393","messageId":"394","endLine":49,"endColumn":39},{"ruleId":"391","severity":1,"message":"392","line":61,"column":45,"nodeType":"393","messageId":"394","endLine":61,"endColumn":71},{"ruleId":"386","severity":1,"message":"387","line":70,"column":45,"nodeType":"388","messageId":"389","endLine":70,"endColumn":48,"suggestions":"427"},{"ruleId":"428","severity":1,"message":"429","line":35,"column":10,"nodeType":"398","messageId":"430","endLine":35,"endColumn":13},{"ruleId":"391","severity":1,"message":"392","line":49,"column":23,"nodeType":"393","messageId":"394","endLine":49,"endColumn":40,"suggestions":"431"},{"ruleId":"428","severity":1,"message":"432","line":15,"column":3,"nodeType":"398","messageId":"430","endLine":15,"endColumn":10},{"ruleId":"386","severity":1,"message":"387","line":22,"column":40,"nodeType":"388","messageId":"389","endLine":22,"endColumn":43,"suggestions":"433"},{"ruleId":"401","severity":1,"message":"434","line":54,"column":6,"nodeType":"403","endLine":54,"endColumn":8,"suggestions":"435"},{"ruleId":"386","severity":1,"message":"387","line":58,"column":38,"nodeType":"388","messageId":"389","endLine":58,"endColumn":41,"suggestions":"436"},{"ruleId":"437","severity":2,"message":"438","line":28,"column":35,"nodeType":"398","endLine":28,"endColumn":49,"suppressions":"439"},{"ruleId":"428","severity":1,"message":"440","line":119,"column":3,"nodeType":"398","messageId":"430","endLine":119,"endColumn":13},{"ruleId":"428","severity":1,"message":"441","line":120,"column":3,"nodeType":"398","messageId":"430","endLine":120,"endColumn":6},{"ruleId":"428","severity":1,"message":"442","line":126,"column":3,"nodeType":"398","messageId":"430","endLine":126,"endColumn":9},{"ruleId":"428","severity":1,"message":"443","line":127,"column":3,"nodeType":"398","messageId":"430","endLine":127,"endColumn":13},{"ruleId":"428","severity":1,"message":"444","line":133,"column":39,"nodeType":"398","messageId":"430","endLine":133,"endColumn":50},{"ruleId":"401","severity":1,"message":"445","line":151,"column":6,"nodeType":"403","endLine":151,"endColumn":20,"suggestions":"446"},{"ruleId":"391","severity":1,"message":"392","line":179,"column":35,"nodeType":"393","messageId":"394","endLine":179,"endColumn":64},{"ruleId":"391","severity":1,"message":"392","line":181,"column":30,"nodeType":"393","messageId":"394","endLine":181,"endColumn":49},{"ruleId":"391","severity":1,"message":"392","line":353,"column":25,"nodeType":"393","messageId":"394","endLine":353,"endColumn":49},{"ruleId":"428","severity":1,"message":"447","line":1006,"column":7,"nodeType":"398","messageId":"430","endLine":1006,"endColumn":14},{"ruleId":"428","severity":1,"message":"440","line":88,"column":3,"nodeType":"398","messageId":"430","endLine":88,"endColumn":13},{"ruleId":"428","severity":1,"message":"441","line":89,"column":3,"nodeType":"398","messageId":"430","endLine":89,"endColumn":6},{"ruleId":"428","severity":1,"message":"432","line":90,"column":3,"nodeType":"398","messageId":"430","endLine":90,"endColumn":10},{"ruleId":"428","severity":1,"message":"442","line":94,"column":3,"nodeType":"398","messageId":"430","endLine":94,"endColumn":9},{"ruleId":"428","severity":1,"message":"443","line":95,"column":3,"nodeType":"398","messageId":"430","endLine":95,"endColumn":13},{"ruleId":"428","severity":1,"message":"448","line":99,"column":16,"nodeType":"398","messageId":"430","endLine":99,"endColumn":23},{"ruleId":"428","severity":1,"message":"449","line":101,"column":49,"nodeType":"398","messageId":"430","endLine":101,"endColumn":61},{"ruleId":"428","severity":1,"message":"450","line":105,"column":10,"nodeType":"398","messageId":"430","endLine":105,"endColumn":34},{"ruleId":"401","severity":1,"message":"445","line":121,"column":6,"nodeType":"403","endLine":121,"endColumn":20,"suggestions":"451"},{"ruleId":"401","severity":1,"message":"452","line":238,"column":3,"nodeType":"453","endLine":260,"endColumn":4},{"ruleId":"454","severity":2,"message":"455","line":98,"column":39,"nodeType":"398","messageId":"456","endLine":98,"endColumn":46,"suppressions":"457"},{"ruleId":"454","severity":2,"message":"458","line":98,"column":47,"nodeType":"398","messageId":"456","endLine":98,"endColumn":50,"suppressions":"459"},{"ruleId":"428","severity":1,"message":"460","line":11,"column":7,"nodeType":"398","messageId":"430","endLine":11,"endColumn":17},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["461","462"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["463","464"],"@typescript-eslint/ban-types","Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","Identifier","bannedTypeMessage",["465"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleOrderCategoryChange' and 'selectedOrderCategory'. Either include them or remove the dependency array.","ArrayExpression",["466"],["467","468"],["469","470"],"React Hook useEffect has a missing dependency: 'getMetadata'. Either include it or remove the dependency array.",["471"],"React Hook useEffect has a missing dependency: 'getUserPaymentTokenAccount'. Either include it or remove the dependency array.",["472"],["473","474"],["475","476"],"React Hook useEffect has a missing dependency: 'handleExecute'. Either include it or remove the dependency array.",["477"],["478","479"],["480","481"],["482","483"],"React Hook useEffect has a missing dependency: 'refreshIssuedTokens'. Either include it or remove the dependency array.",["484"],"React Hook useEffect has a missing dependency: 'refreshManagedTokens'. Either include it or remove the dependency array.",["485"],["486"],["487"],["488","489"],"React Hook useEffect has a missing dependency: 'refreshPaymentMints'. Either include it or remove the dependency array.",["490"],["491","492"],"@typescript-eslint/no-unused-vars","'dev' is assigned a value but never used. Allowed unused vars must match /^_/u.","unusedVar",["493"],"'cluster' is defined but never used. Allowed unused args must match /^_/u.",["494","495"],"React Hook useCallback has missing dependencies: 'connection', 'tokenData.tokenManager', and 'wallet'. Either include them or remove the dependency array.",["496"],["497","498"],"react-hooks/rules-of-hooks","React Hook \"useTransaction\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.",["499"],"'appTwitter' is defined but never used. Allowed unused args must match /^_/u.","'dev' is defined but never used. Allowed unused args must match /^_/u.","'notify' is defined but never used. Allowed unused args must match /^_/u.","'onComplete' is defined but never used. Allowed unused args must match /^_/u.","'editionData' is assigned a value but never used. Allowed unused vars must match /^_/u.","React Hook useEffect has a missing dependency: 'getEdition'. Either include it or remove the dependency array.",["500"],"'BigIcon' is assigned a value but never used. Allowed unused vars must match /^_/u.","'setLink' is assigned a value but never used. Allowed unused vars must match /^_/u.","'tokenManager' is assigned a value but never used. Allowed unused vars must match /^_/u.","'paymentTokenAccountError' is assigned a value but never used. Allowed unused vars must match /^_/u.",["501"],"The 'getUserPaymentTokenAccount' function makes the dependencies of useEffect Hook (at line 141) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'getUserPaymentTokenAccount' in its own useCallback() Hook.","FunctionDeclaration","react/prop-types","'opacity' is missing in props validation","missingPropType",["502"],"'opacity.get' is missing in props validation",["503"],"'connection' is assigned a value but never used. Allowed unused vars must match /^_/u.",{"messageId":"504","fix":"505","desc":"506"},{"messageId":"507","fix":"508","desc":"509"},{"messageId":"504","fix":"510","desc":"506"},{"messageId":"507","fix":"511","desc":"509"},{"kind":"512","justification":"513"},{"desc":"514","fix":"515"},{"messageId":"504","fix":"516","desc":"506"},{"messageId":"507","fix":"517","desc":"509"},{"messageId":"504","fix":"518","desc":"506"},{"messageId":"507","fix":"519","desc":"509"},{"desc":"520","fix":"521"},{"desc":"522","fix":"523"},{"messageId":"504","fix":"524","desc":"506"},{"messageId":"507","fix":"525","desc":"509"},{"messageId":"504","fix":"526","desc":"506"},{"messageId":"507","fix":"527","desc":"509"},{"desc":"528","fix":"529"},{"messageId":"504","fix":"530","desc":"506"},{"messageId":"507","fix":"531","desc":"509"},{"messageId":"504","fix":"532","desc":"506"},{"messageId":"507","fix":"533","desc":"509"},{"messageId":"504","fix":"534","desc":"506"},{"messageId":"507","fix":"535","desc":"509"},{"desc":"536","fix":"537"},{"desc":"538","fix":"539"},{"messageId":"540","fix":"541","desc":"542"},{"messageId":"540","fix":"543","desc":"542"},{"messageId":"504","fix":"544","desc":"506"},{"messageId":"507","fix":"545","desc":"509"},{"desc":"546","fix":"547"},{"messageId":"504","fix":"548","desc":"506"},{"messageId":"507","fix":"549","desc":"509"},{"messageId":"540","fix":"550","desc":"542"},{"messageId":"504","fix":"551","desc":"506"},{"messageId":"507","fix":"552","desc":"509"},{"desc":"553","fix":"554"},{"messageId":"504","fix":"555","desc":"506"},{"messageId":"507","fix":"556","desc":"509"},{"kind":"512","justification":"513"},{"desc":"557","fix":"558"},{"desc":"557","fix":"559"},{"kind":"512","justification":"513"},{"kind":"512","justification":"513"},"suggestUnknown",{"range":"560","text":"561"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"560","text":"562"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"563","text":"561"},{"range":"563","text":"562"},"directive","","Update the dependencies array to be: [handleOrderCategoryChange, issuedTokens, selectedOrderCategory]",{"range":"564","text":"565"},{"range":"566","text":"561"},{"range":"566","text":"562"},{"range":"567","text":"561"},{"range":"567","text":"562"},"Update the dependencies array to be: [ctx, getMetadata, setError, tokenManagerId]",{"range":"568","text":"569"},"Update the dependencies array to be: [ctx, wallet, tokenData, getUserPaymentTokenAccount]",{"range":"570","text":"571"},{"range":"572","text":"561"},{"range":"572","text":"562"},{"range":"573","text":"561"},{"range":"573","text":"562"},"Update the dependencies array to be: [handleExecute, setError, tx]",{"range":"574","text":"575"},{"range":"576","text":"561"},{"range":"576","text":"562"},{"range":"577","text":"561"},{"range":"577","text":"562"},{"range":"578","text":"561"},{"range":"578","text":"562"},"Update the dependencies array to be: [connection, setError, setRefreshing, tokenDatas, config, refreshIssuedTokens]",{"range":"579","text":"580"},"Update the dependencies array to be: [connection, setError, address, tokenDatas, setRefreshing, refreshManagedTokens]",{"range":"581","text":"582"},"suggestOptionalChain",{"range":"583","text":"584"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"585","text":"584"},{"range":"586","text":"561"},{"range":"586","text":"562"},"Update the dependencies array to be: [ctx.connection, refreshPaymentMints]",{"range":"587","text":"588"},{"range":"589","text":"561"},{"range":"589","text":"562"},{"range":"590","text":"584"},{"range":"591","text":"561"},{"range":"591","text":"562"},"Update the dependencies array to be: [connection, tokenData.tokenManager, wallet]",{"range":"592","text":"593"},{"range":"594","text":"561"},{"range":"594","text":"562"},"Update the dependencies array to be: [getEdition, metaplexData]",{"range":"595","text":"596"},{"range":"597","text":"596"},[1933,1936],"unknown","never",[14397,14400],[3910,3924],"[handleOrderCategoryChange, issuedTokens, selectedOrderCategory]",[6941,6944],[7681,7684],[8506,8537],"[ctx, getMetadata, setError, tokenManagerId]",[8598,8622],"[ctx, wallet, tokenData, getUserPaymentTokenAccount]",[11429,11432],[1040,1043],[3869,3883],"[handleExecute, setError, tx]",[4598,4601],[174,177],[208,211],[2024,2081],"[connection, setError, setRefreshing, tokenDatas, config, refreshIssuedTokens]",[2115,2173],"[connection, setError, address, tokenDatas, setRefreshing, refreshManagedTokens]",[1725,1726],"?",[1921,1922],[1958,1961],[2129,2145],"[ctx.connection, refreshPaymentMints]",[2278,2281],[1298,1299],[672,675],[1835,1837],"[connection, tokenData.tokenManager, wallet]",[1931,1934],[4658,4672],"[getEdition, metaplexData]",[3877,3891]]